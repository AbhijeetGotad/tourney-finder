{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3MultiPropagator } from './B3MultiPropagator';\nimport { B3SinglePropagator } from './B3SinglePropagator';\nimport { B3_CONTEXT_HEADER } from './constants';\nimport { B3InjectEncoding } from './types';\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\n\nvar B3Propagator =\n/** @class */\nfunction () {\n  function B3Propagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this._b3MultiPropagator = new B3MultiPropagator();\n    this._b3SinglePropagator = new B3SinglePropagator();\n\n    if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n      this._inject = this._b3MultiPropagator.inject;\n      this._fields = this._b3MultiPropagator.fields();\n    } else {\n      this._inject = this._b3SinglePropagator.inject;\n      this._fields = this._b3SinglePropagator.fields();\n    }\n  }\n\n  B3Propagator.prototype.inject = function (context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      return;\n    }\n\n    this._inject(context, carrier, setter);\n  };\n\n  B3Propagator.prototype.extract = function (context, carrier, getter) {\n    var header = getter.get(carrier, B3_CONTEXT_HEADER);\n    var b3Context = Array.isArray(header) ? header[0] : header;\n\n    if (b3Context) {\n      return this._b3SinglePropagator.extract(context, carrier, getter);\n    } else {\n      return this._b3MultiPropagator.extract(context, carrier, getter);\n    }\n  };\n\n  B3Propagator.prototype.fields = function () {\n    return this._fields;\n  };\n\n  return B3Propagator;\n}();\n\nexport { B3Propagator }; //# sourceMappingURL=B3Propagator.js.map","map":null,"metadata":{},"sourceType":"module"}