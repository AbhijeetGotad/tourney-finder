{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, NgModule, SkipSelf, Component } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport * as api from '@opentelemetry/api';\nimport { SpanStatusCode, SpanKind } from '@opentelemetry/api';\nimport { WebTracerProvider, StackContextManager, ParentBasedSampler as ParentBasedSampler$1, AlwaysOnSampler as AlwaysOnSampler$1, AlwaysOffSampler as AlwaysOffSampler$1, TraceIdRatioBasedSampler as TraceIdRatioBasedSampler$1 } from '@opentelemetry/sdk-trace-web';\nimport { NoopSpanProcessor, SimpleSpanProcessor, ConsoleSpanExporter, BatchSpanProcessor, ParentBasedSampler, AlwaysOnSampler, AlwaysOffSampler, TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-base';\nimport { isUrlIgnored, W3CTraceContextPropagator, CompositePropagator } from '@opentelemetry/core';\nimport { SemanticAttributes, SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '@opentelemetry/resources';\nimport { tap, finalize } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\nimport { B3InjectEncoding, B3Propagator } from '@opentelemetry/propagator-b3';\nimport { JaegerPropagator } from '@opentelemetry/propagator-jaeger';\nimport { AWSXRayPropagator } from '@opentelemetry/propagator-aws-xray';\nimport { ZoneContextManager } from '@opentelemetry/context-zone-peer-dep';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n/** OTEL_CONFIG : Config injection */\n\nconst OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n/** Logger : injection for a logger compatible */\n\nconst OTEL_LOGGER = new InjectionToken('otelcol.logger');\n/** custom span */\n\nconst OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\nconst OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nconst defineConfigProvider = (config, configProvider) => {\n  if (config) {\n    configProvider = {\n      provide: OTEL_CONFIG,\n      useValue: config\n    };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n\n  return configProvider;\n};\n\nvar name = \"@jufab/opentelemetry-angular-interceptor\";\nvar version = \"1.4.1\";\nvar infoLibrary = {\n  name: name,\n  version: version\n};\n/** injection for a Exporter */\n\nconst OTEL_EXPORTER = new InjectionToken('otelcol.exporter');\n/** injection for a propagator */\n\nconst OTEL_PROPAGATOR = new InjectionToken('otelcol.propagator');\n/**\n * OpenTelemetryInterceptor class\n */\n\nlet OpenTelemetryHttpInterceptor = /*#__PURE__*/(() => {\n  class OpenTelemetryHttpInterceptor {\n    /**\n     * constructor\n     *\n     * @param config configuration\n     * @param exporterService service exporter injected\n     * @param propagatorService propagator injected\n     * @param logger define logger\n     * @param customSpan a customSpan interface to add attributes\n     * @param platformLocation encapsulates all calls to DOM APIs\n     */\n    constructor(config, exporterService, propagatorService, logger, customSpan, platformLocation) {\n      this.config = config;\n      this.exporterService = exporterService;\n      this.propagatorService = propagatorService;\n      this.logger = logger;\n      this.customSpan = customSpan;\n      this.platformLocation = platformLocation;\n      /**\n       * Log or not body\n       */\n\n      this.logBody = false;\n      this.tracer = new WebTracerProvider({\n        sampler: this.defineProbabilitySampler(this.convertStringToNumber(config.commonConfig.probabilitySampler)),\n        resource: this.loadResourceAttributes(this.config.commonConfig)\n      });\n      this.insertOrNotSpanExporter();\n      this.contextManager = new StackContextManager();\n      this.tracer.register({\n        propagator: this.propagatorService.getPropagator(),\n        contextManager: this.contextManager\n      });\n      this.logBody = config.commonConfig.logBody;\n      api.diag.setLogger(logger, config.commonConfig.logLevel);\n    }\n    /**\n     * Overide method\n     * Interceptor from HttpInterceptor Angular\n     *\n     * @param request the current request\n     * @param next next\n     */\n\n\n    intercept(request, next) {\n      var _a;\n\n      if (isUrlIgnored(request.url, (_a = this.config.ignoreUrls) === null || _a === void 0 ? void 0 : _a.urls)) {\n        return next.handle(request);\n      }\n\n      this.contextManager.disable(); //FIX - reinit contextManager for each http call\n\n      this.contextManager.enable();\n      const span = this.initSpan(request);\n      const tracedReq = this.injectContextAndHeader(request);\n      return next.handle(tracedReq).pipe(tap(event => {\n        span.setAttributes({\n          [SemanticAttributes.HTTP_STATUS_CODE]: event.status\n        });\n\n        if (this.logBody && event.body != null) {\n          span.addEvent('response', {\n            body: JSON.stringify(event.body)\n          });\n        }\n\n        span.setStatus({\n          code: SpanStatusCode.UNSET\n        });\n        this.setCustomSpan(span, request, event);\n      }, event => {\n        span.setAttributes({\n          [SemanticAttributes.HTTP_STATUS_CODE]: event.status\n        });\n        span.recordException({\n          name: event.name,\n          message: event.message,\n          stack: event.error\n        });\n        span.setStatus({\n          code: SpanStatusCode.ERROR\n        });\n        this.setCustomSpan(span, request, event);\n      }), finalize(() => {\n        span.end();\n        this.contextManager.disable();\n      }));\n    }\n    /**\n     * Get current scheme, hostname and port\n     */\n\n\n    getURL() {\n      return this.platformLocation.href;\n    }\n    /**\n     * Generate Resource Attributes\n     */\n\n\n    loadResourceAttributes(commonConfig) {\n      let resourceAttributes = Resource.default().merge(new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: commonConfig.serviceName\n      }));\n\n      if (commonConfig.resourceAttributes !== undefined) {\n        resourceAttributes = resourceAttributes.merge(new Resource(commonConfig.resourceAttributes));\n      }\n\n      return resourceAttributes;\n    }\n    /**\n     * Initialise a span for a request intercepted\n     *\n     * @param request request\n     */\n\n\n    initSpan(request) {\n      const urlRequest = request.urlWithParams.startsWith('http') ? new URL(request.urlWithParams) : new URL(this.getURL());\n      const span = this.tracer.getTracer(infoLibrary.name, infoLibrary.version).startSpan(`${urlRequest.protocol.replace(':', '').toUpperCase()} ${request.method.toUpperCase()}`, {\n        attributes: {\n          [SemanticAttributes.HTTP_METHOD]: request.method,\n          [SemanticAttributes.HTTP_URL]: request.urlWithParams,\n          [SemanticAttributes.HTTP_HOST]: urlRequest.host,\n          [SemanticAttributes.HTTP_SCHEME]: urlRequest.protocol.replace(':', ''),\n          [SemanticAttributes.HTTP_TARGET]: urlRequest.pathname + urlRequest.search,\n          [SemanticAttributes.HTTP_USER_AGENT]: window.navigator.userAgent\n        },\n        kind: SpanKind.CLIENT\n      }, this.contextManager.active());\n      /*eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_currentContext\"] }]*/\n\n      this.contextManager._currentContext = api.trace.setSpan(this.contextManager.active(), span);\n      return span;\n    }\n    /**\n     * Add header propagator in request and conserve original header\n     *\n     * @param request request\n     */\n\n\n    injectContextAndHeader(request) {\n      const carrier = {};\n      api.propagation.inject(this.contextManager.active(), carrier, api.defaultTextMapSetter);\n      request.headers.keys().map(key => {\n        carrier[key] = request.headers.get(key);\n      });\n      return request.clone({\n        setHeaders: carrier\n      });\n    }\n    /**\n     * Verify to insert or not a Span Exporter\n     */\n\n\n    insertOrNotSpanExporter() {\n      if (this.exporterService.getExporter() !== undefined) {\n        this.insertSpanProcessorProductionMode();\n        this.insertConsoleSpanExporter();\n      } else {\n        this.tracer.addSpanProcessor(new NoopSpanProcessor());\n      }\n    }\n    /**\n     * Insert in tracer the console span if config is true\n     */\n\n\n    insertConsoleSpanExporter() {\n      if (this.config.commonConfig.console) {\n        this.tracer.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n      }\n    }\n    /**\n     * Insert BatchSpanProcessor in production mode\n     * SimpleSpanProcessor otherwise\n     */\n\n\n    insertSpanProcessorProductionMode() {\n      var _a, _b, _c, _d;\n\n      const bufferConfig = {\n        maxExportBatchSize: this.convertStringToNumber((_a = this.config.batchSpanProcessorConfig) === null || _a === void 0 ? void 0 : _a.maxExportBatchSize),\n        scheduledDelayMillis: this.convertStringToNumber((_b = this.config.batchSpanProcessorConfig) === null || _b === void 0 ? void 0 : _b.scheduledDelayMillis),\n        exportTimeoutMillis: this.convertStringToNumber((_c = this.config.batchSpanProcessorConfig) === null || _c === void 0 ? void 0 : _c.exportTimeoutMillis),\n        maxQueueSize: this.convertStringToNumber((_d = this.config.batchSpanProcessorConfig) === null || _d === void 0 ? void 0 : _d.maxQueueSize)\n      };\n      this.tracer.addSpanProcessor(this.config.commonConfig.production ? new BatchSpanProcessor(this.exporterService.getExporter(), bufferConfig) : new SimpleSpanProcessor(this.exporterService.getExporter()));\n    }\n    /**\n     * define the Probability Sampler\n     * By Default, it's always (or 1)\n     *\n     * @param sampleConfig the sample configuration\n     */\n\n\n    defineProbabilitySampler(sampleConfig) {\n      if (sampleConfig >= 1) {\n        return new ParentBasedSampler({\n          root: new AlwaysOnSampler()\n        });\n      } else if (sampleConfig <= 0 || sampleConfig === undefined) {\n        return new ParentBasedSampler({\n          root: new AlwaysOffSampler()\n        });\n      } else {\n        return new ParentBasedSampler({\n          root: new TraceIdRatioBasedSampler(sampleConfig)\n        });\n      }\n    }\n    /**\n     * convert String to Number (or undefined)\n     *\n     * @param value\n     * @returns number or undefined\n     */\n\n\n    convertStringToNumber(value) {\n      return value !== undefined ? Number(value) : undefined;\n    }\n    /**\n     * Set custom attributes in span with a CustomSpan\n     *\n     * @param span\n     * @param request\n     * @param response\n     * @returns Span\n     */\n\n\n    setCustomSpan(span, request, response) {\n      return this.customSpan != null ? this.customSpan.add(span, request, response) : span;\n    }\n\n  }\n\n  OpenTelemetryHttpInterceptor.ɵfac = function OpenTelemetryHttpInterceptor_Factory(t) {\n    return new (t || OpenTelemetryHttpInterceptor)(i0.ɵɵinject(OTEL_CONFIG), i0.ɵɵinject(OTEL_EXPORTER), i0.ɵɵinject(OTEL_PROPAGATOR), i0.ɵɵinject(OTEL_LOGGER, 8), i0.ɵɵinject(OTEL_CUSTOM_SPAN, 8), i0.ɵɵinject(i1.PlatformLocation));\n  };\n\n  OpenTelemetryHttpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OpenTelemetryHttpInterceptor,\n    factory: OpenTelemetryHttpInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return OpenTelemetryHttpInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet OpenTelemetryInterceptorModule = /*#__PURE__*/(() => {\n  class OpenTelemetryInterceptorModule {\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('OpentelemetryInterceptorModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n    static forRoot(config, configProvider) {\n      //Interceptor\n      const interceptorProvider = {\n        provide: HTTP_INTERCEPTORS,\n        useClass: OpenTelemetryHttpInterceptor,\n        multi: true\n      };\n      configProvider = defineConfigProvider(config, configProvider);\n      return {\n        ngModule: OpenTelemetryInterceptorModule,\n        providers: [configProvider, interceptorProvider]\n      };\n    }\n\n  }\n\n  OpenTelemetryInterceptorModule.ɵfac = function OpenTelemetryInterceptorModule_Factory(t) {\n    return new (t || OpenTelemetryInterceptorModule)(i0.ɵɵinject(OpenTelemetryInterceptorModule, 12));\n  };\n\n  OpenTelemetryInterceptorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OpenTelemetryInterceptorModule\n  });\n  OpenTelemetryInterceptorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[HttpClientModule]]\n  });\n  return OpenTelemetryInterceptorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * OtelcolExporterService class\n */\n\n\nlet OtelcolExporterService = /*#__PURE__*/(() => {\n  class OtelcolExporterService {\n    /**\n     * constructor\n     *\n     * @param config OpenTelemetryConfig\n     */\n    constructor(config) {\n      var _a, _b, _c, _d;\n\n      this.otelcolConfig = {\n        url: (_a = config.otelcolConfig) === null || _a === void 0 ? void 0 : _a.url,\n        headers: (_b = config.otelcolConfig) === null || _b === void 0 ? void 0 : _b.headers,\n        concurrencyLimit: Number((_c = config.otelcolConfig) === null || _c === void 0 ? void 0 : _c.concurrencyLimit),\n        timeoutMillis: Number((_d = config.otelcolConfig) === null || _d === void 0 ? void 0 : _d.timeoutMillis)\n      };\n    }\n    /**\n     * Return a CollectorExporter with the configuration\n     *\n     * @return a CollectorExporter\n     */\n\n\n    getExporter() {\n      return new OTLPTraceExporter(this.otelcolConfig);\n    }\n\n  }\n\n  OtelcolExporterService.ɵfac = function OtelcolExporterService_Factory(t) {\n    return new (t || OtelcolExporterService)(i0.ɵɵinject(OTEL_CONFIG));\n  };\n\n  OtelcolExporterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OtelcolExporterService,\n    factory: OtelcolExporterService.ɵfac,\n    providedIn: 'root'\n  });\n  return OtelcolExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet OtelColExporterModule = /*#__PURE__*/(() => {\n  class OtelColExporterModule {}\n\n  OtelColExporterModule.ɵfac = function OtelColExporterModule_Factory(t) {\n    return new (t || OtelColExporterModule)();\n  };\n\n  OtelColExporterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OtelColExporterModule\n  });\n  OtelColExporterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_EXPORTER,\n      useClass: OtelcolExporterService\n    }],\n    imports: [[]]\n  });\n  return OtelColExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * ConsoleSpanExporterService\n * A default span exporter\n */\n\n\nlet ConsoleSpanExporterService = /*#__PURE__*/(() => {\n  class ConsoleSpanExporterService {\n    /**\n     * Return a ConsoleSpanExporter\n     *\n     * @return SpanExporter\n     */\n    getExporter() {\n      return new ConsoleSpanExporter();\n    }\n\n  }\n\n  ConsoleSpanExporterService.ɵfac = function ConsoleSpanExporterService_Factory(t) {\n    return new (t || ConsoleSpanExporterService)();\n  };\n\n  ConsoleSpanExporterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ConsoleSpanExporterService,\n    factory: ConsoleSpanExporterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConsoleSpanExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ConsoleSpanExporterModule = /*#__PURE__*/(() => {\n  class ConsoleSpanExporterModule {}\n\n  ConsoleSpanExporterModule.ɵfac = function ConsoleSpanExporterModule_Factory(t) {\n    return new (t || ConsoleSpanExporterModule)();\n  };\n\n  ConsoleSpanExporterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ConsoleSpanExporterModule\n  });\n  ConsoleSpanExporterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_EXPORTER,\n      useClass: ConsoleSpanExporterService\n    }],\n    imports: [[]]\n  });\n  return ConsoleSpanExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * ZipkinExporterService class\n */\n\n\nlet ZipkinExporterService = /*#__PURE__*/(() => {\n  class ZipkinExporterService {\n    /**\n     * constructor\n     *\n     * @param config OpenTelemetryConfig\n     */\n    constructor(config) {\n      var _a, _b;\n\n      this.zipkinConfig = {\n        url: (_a = config.zipkinConfig) === null || _a === void 0 ? void 0 : _a.url,\n        headers: (_b = config.zipkinConfig) === null || _b === void 0 ? void 0 : _b.headers\n      };\n    }\n    /**\n     * Return a ZipkinExporter configured with zipkinConfig field\n     *\n     * @return SpanExporter\n     */\n\n\n    getExporter() {\n      return new ZipkinExporter(this.zipkinConfig);\n    }\n\n  }\n\n  ZipkinExporterService.ɵfac = function ZipkinExporterService_Factory(t) {\n    return new (t || ZipkinExporterService)(i0.ɵɵinject(OTEL_CONFIG));\n  };\n\n  ZipkinExporterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ZipkinExporterService,\n    factory: ZipkinExporterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ZipkinExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ZipkinExporterModule = /*#__PURE__*/(() => {\n  class ZipkinExporterModule {}\n\n  ZipkinExporterModule.ɵfac = function ZipkinExporterModule_Factory(t) {\n    return new (t || ZipkinExporterModule)();\n  };\n\n  ZipkinExporterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ZipkinExporterModule\n  });\n  ZipkinExporterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_EXPORTER,\n      useClass: ZipkinExporterService\n    }],\n    imports: [[]]\n  });\n  return ZipkinExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * NoopSpanExporterService\n * A No-op span exporter\n */\n\n\nlet NoopSpanExporterService = /*#__PURE__*/(() => {\n  class NoopSpanExporterService {\n    /**\n     * Return undefined\n     *\n     * @return SpanExporter\n     */\n    getExporter() {\n      return undefined;\n    }\n\n  }\n\n  NoopSpanExporterService.ɵfac = function NoopSpanExporterService_Factory(t) {\n    return new (t || NoopSpanExporterService)();\n  };\n\n  NoopSpanExporterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NoopSpanExporterService,\n    factory: NoopSpanExporterService.ɵfac,\n    providedIn: 'root'\n  });\n  return NoopSpanExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NoopSpanExporterModule = /*#__PURE__*/(() => {\n  class NoopSpanExporterModule {}\n\n  NoopSpanExporterModule.ɵfac = function NoopSpanExporterModule_Factory(t) {\n    return new (t || NoopSpanExporterModule)();\n  };\n\n  NoopSpanExporterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NoopSpanExporterModule\n  });\n  NoopSpanExporterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_EXPORTER,\n      useClass: NoopSpanExporterService\n    }],\n    imports: [[CommonModule]]\n  });\n  return NoopSpanExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * B3PropagatorService\n *\n * Can be a single or multi header.\n *\n * See Configuration for more information\n */\n\n\nlet B3PropagatorService = /*#__PURE__*/(() => {\n  class B3PropagatorService {\n    /**\n     * Constructor\n     *\n     * @param config OpenTelemetryConfig\n     */\n    constructor(config) {\n      var _a;\n\n      this.b3PropagatorConfig = {\n        injectEncoding: B3PropagatorService.defineB3Encoding((_a = config.b3PropagatorConfig) === null || _a === void 0 ? void 0 : _a.multiHeader)\n      };\n    }\n    /**\n     * Define if it's a single or multi header\n     *\n     * @param value string (0 => single header, 1 => Multi Header)\n     * @return B3InjectEncoding\n     */\n\n\n    static defineB3Encoding(value) {\n      if (value && '0' === value) {\n        return B3InjectEncoding.SINGLE_HEADER;\n      }\n\n      return B3InjectEncoding.MULTI_HEADER;\n    }\n    /**\n     * Return an B3Propagator\n     *\n     * @return TextMapPropagator as B3Propagator\n     */\n\n\n    getPropagator() {\n      return new B3Propagator(this.b3PropagatorConfig);\n    }\n\n  }\n\n  B3PropagatorService.ɵfac = function B3PropagatorService_Factory(t) {\n    return new (t || B3PropagatorService)(i0.ɵɵinject(OTEL_CONFIG));\n  };\n\n  B3PropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: B3PropagatorService,\n    factory: B3PropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return B3PropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet B3PropagatorModule = /*#__PURE__*/(() => {\n  class B3PropagatorModule {}\n\n  B3PropagatorModule.ɵfac = function B3PropagatorModule_Factory(t) {\n    return new (t || B3PropagatorModule)();\n  };\n\n  B3PropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: B3PropagatorModule\n  });\n  B3PropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: B3PropagatorService\n    }],\n    imports: [[]]\n  });\n  return B3PropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * W3CTraceContextPropagatorService\n */\n\n\nlet W3CTraceContextPropagatorService = /*#__PURE__*/(() => {\n  class W3CTraceContextPropagatorService {\n    /**\n     * Return an W3CTraceContextPropagatorService\n     *\n     * @return TextMapPropagator as W3CTraceContextPropagatorService\n     */\n    getPropagator() {\n      return new W3CTraceContextPropagator();\n    }\n\n  }\n\n  W3CTraceContextPropagatorService.ɵfac = function W3CTraceContextPropagatorService_Factory(t) {\n    return new (t || W3CTraceContextPropagatorService)();\n  };\n\n  W3CTraceContextPropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: W3CTraceContextPropagatorService,\n    factory: W3CTraceContextPropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return W3CTraceContextPropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * JaegerHttpTracePropagatorService\n */\n\n\nlet JaegerHttpTracePropagatorService = /*#__PURE__*/(() => {\n  class JaegerHttpTracePropagatorService {\n    /**\n     * Constructor\n     *\n     * @param config OpenTelemetryConfig\n     */\n    constructor(config) {\n      var _a;\n\n      this.customHeader = (_a = config.jaegerPropagatorConfig) === null || _a === void 0 ? void 0 : _a.customHeader;\n    }\n    /**\n     * Return an JaegerPropagator\n     *\n     * @return TextMapPropagator as JaegerPropagator\n     */\n\n\n    getPropagator() {\n      return new JaegerPropagator(this.customHeader);\n    }\n\n  }\n\n  JaegerHttpTracePropagatorService.ɵfac = function JaegerHttpTracePropagatorService_Factory(t) {\n    return new (t || JaegerHttpTracePropagatorService)(i0.ɵɵinject(OTEL_CONFIG));\n  };\n\n  JaegerHttpTracePropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: JaegerHttpTracePropagatorService,\n    factory: JaegerHttpTracePropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return JaegerHttpTracePropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * AwsXrayPropagatorService\n */\n\n\nlet AwsXrayPropagatorService = /*#__PURE__*/(() => {\n  class AwsXrayPropagatorService {\n    /**\n     * Return an AwsXrayPropagator\n     *\n     * @return TextMapPropagator as AwsXrayPropagator\n     */\n    getPropagator() {\n      return new AWSXRayPropagator();\n    }\n\n  }\n\n  AwsXrayPropagatorService.ɵfac = function AwsXrayPropagatorService_Factory(t) {\n    return new (t || AwsXrayPropagatorService)();\n  };\n\n  AwsXrayPropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AwsXrayPropagatorService,\n    factory: AwsXrayPropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AwsXrayPropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * CompositePropagatorService\n */\n\n\nlet CompositePropagatorService = /*#__PURE__*/(() => {\n  class CompositePropagatorService {\n    /**\n     * Constructor\n     */\n    constructor(b3PropagatorService, w3cTraceContextPropagatorService, jaegerHttpTracePropagatorService, awsXrayPropagatorService) {\n      this.b3PropagatorService = b3PropagatorService;\n      this.w3cTraceContextPropagatorService = w3cTraceContextPropagatorService;\n      this.jaegerHttpTracePropagatorService = jaegerHttpTracePropagatorService;\n      this.awsXrayPropagatorService = awsXrayPropagatorService;\n    }\n    /**\n     * Return an CompositePropagator\n     *\n     * @return TextMapPropagator as CompositePropagator\n     */\n\n\n    getPropagator() {\n      return new CompositePropagator({\n        propagators: [this.b3PropagatorService.getPropagator(), this.w3cTraceContextPropagatorService.getPropagator(), this.jaegerHttpTracePropagatorService.getPropagator(), this.awsXrayPropagatorService.getPropagator()]\n      });\n    }\n\n  }\n\n  CompositePropagatorService.ɵfac = function CompositePropagatorService_Factory(t) {\n    return new (t || CompositePropagatorService)(i0.ɵɵinject(B3PropagatorService), i0.ɵɵinject(W3CTraceContextPropagatorService), i0.ɵɵinject(JaegerHttpTracePropagatorService), i0.ɵɵinject(AwsXrayPropagatorService));\n  };\n\n  CompositePropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CompositePropagatorService,\n    factory: CompositePropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return CompositePropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CompositePropagatorModule = /*#__PURE__*/(() => {\n  class CompositePropagatorModule {}\n\n  CompositePropagatorModule.ɵfac = function CompositePropagatorModule_Factory(t) {\n    return new (t || CompositePropagatorModule)();\n  };\n\n  CompositePropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CompositePropagatorModule\n  });\n  CompositePropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: CompositePropagatorService\n    }],\n    imports: [[]]\n  });\n  return CompositePropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AwsXrayPropagatorModule = /*#__PURE__*/(() => {\n  class AwsXrayPropagatorModule {}\n\n  AwsXrayPropagatorModule.ɵfac = function AwsXrayPropagatorModule_Factory(t) {\n    return new (t || AwsXrayPropagatorModule)();\n  };\n\n  AwsXrayPropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AwsXrayPropagatorModule\n  });\n  AwsXrayPropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: AwsXrayPropagatorService\n    }],\n    imports: [[]]\n  });\n  return AwsXrayPropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet W3CTraceContextPropagatorModule = /*#__PURE__*/(() => {\n  class W3CTraceContextPropagatorModule {}\n\n  W3CTraceContextPropagatorModule.ɵfac = function W3CTraceContextPropagatorModule_Factory(t) {\n    return new (t || W3CTraceContextPropagatorModule)();\n  };\n\n  W3CTraceContextPropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: W3CTraceContextPropagatorModule\n  });\n  W3CTraceContextPropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: W3CTraceContextPropagatorService\n    }],\n    imports: [[]]\n  });\n  return W3CTraceContextPropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet JaegerHttpTracePropagatorModule = /*#__PURE__*/(() => {\n  class JaegerHttpTracePropagatorModule {}\n\n  JaegerHttpTracePropagatorModule.ɵfac = function JaegerHttpTracePropagatorModule_Factory(t) {\n    return new (t || JaegerHttpTracePropagatorModule)();\n  };\n\n  JaegerHttpTracePropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: JaegerHttpTracePropagatorModule\n  });\n  JaegerHttpTracePropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: JaegerHttpTracePropagatorService\n    }],\n    imports: [[]]\n  });\n  return JaegerHttpTracePropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * NoopHttpTextPropagatorService\n */\n\n\nlet NoopTextMapPropagatorService = /*#__PURE__*/(() => {\n  class NoopTextMapPropagatorService {\n    /**\n     * Return null\n     *\n     * @return TextMapPropagator as null\n     */\n    getPropagator() {\n      return null;\n    }\n\n  }\n\n  NoopTextMapPropagatorService.ɵfac = function NoopTextMapPropagatorService_Factory(t) {\n    return new (t || NoopTextMapPropagatorService)();\n  };\n\n  NoopTextMapPropagatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NoopTextMapPropagatorService,\n    factory: NoopTextMapPropagatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return NoopTextMapPropagatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NoopTextMapPropagatorModule = /*#__PURE__*/(() => {\n  class NoopTextMapPropagatorModule {}\n\n  NoopTextMapPropagatorModule.ɵfac = function NoopTextMapPropagatorModule_Factory(t) {\n    return new (t || NoopTextMapPropagatorModule)();\n  };\n\n  NoopTextMapPropagatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NoopTextMapPropagatorModule\n  });\n  NoopTextMapPropagatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OTEL_PROPAGATOR,\n      useClass: NoopTextMapPropagatorService\n    }],\n    imports: [[]]\n  });\n  return NoopTextMapPropagatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * InstrumentationService.\n * Service for component to add instrumentation.\n */\n\n\nlet InstrumentationService = /*#__PURE__*/(() => {\n  class InstrumentationService {\n    /**\n     * Constructor\n     *\n     * @param config\n     * @param exporterService\n     * @param propagatorService\n     */\n    constructor(config, exporterService, propagatorService, instrumentationOptions) {\n      this.config = config;\n      this.exporterService = exporterService;\n      this.propagatorService = propagatorService;\n      this.instrumentationOptions = instrumentationOptions;\n      /**\n       * contextManager\n       */\n\n      this.contextManager = new ZoneContextManager();\n      this.tracerProvider = new WebTracerProvider({\n        sampler: this.defineProbabilitySampler(this.convertStringToNumber(this.config.commonConfig.probabilitySampler)),\n        resource: this.loadResourceAttributes(this.config.commonConfig)\n      });\n    }\n    /**\n     * Init instrumentation on init\n     */\n\n\n    initInstrumentation() {\n      this.insertOrNotSpanExporter(this.config.commonConfig.production, this.exporterService, this.config.commonConfig.console);\n      this.tracerProvider.register({\n        contextManager: this.contextManager,\n        propagator: this.propagatorService.getPropagator()\n      });\n      registerInstrumentations({\n        instrumentations: this.instrumentationOptions,\n        tracerProvider: this.tracerProvider\n      });\n    }\n    /**\n     * Generate Resource Attributes\n     */\n\n\n    loadResourceAttributes(commonConfig) {\n      let resourceAttributes = Resource.default();\n      resourceAttributes.merge(new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: commonConfig.serviceName\n      }));\n\n      if (commonConfig.resourceAttributes !== undefined) {\n        resourceAttributes = resourceAttributes.merge(new Resource(commonConfig.resourceAttributes));\n      }\n\n      return resourceAttributes;\n    }\n    /**\n     * Verify to insert or not a Span Exporter\n     */\n\n\n    insertOrNotSpanExporter(production, exporter, console) {\n      if (this.exporterService.getExporter() !== undefined) {\n        this.insertSpanProcessorProductionMode(production, exporter);\n        this.insertConsoleSpanExporter(console);\n      } else {\n        this.tracerProvider.addSpanProcessor(new NoopSpanProcessor());\n      }\n    }\n    /**\n     * Insert in tracer the console span if config is true\n     *\n     * @param console config to insert console span\n     */\n\n\n    insertConsoleSpanExporter(console) {\n      if (console) {\n        this.tracerProvider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n      }\n    }\n    /**\n     * Insert BatchSpanProcessor in production mode\n     * SimpleSpanProcessor otherwise\n     *\n     * @param boolean production\n     * @param IExporter exporter\n     */\n\n\n    insertSpanProcessorProductionMode(production, exporter) {\n      this.tracerProvider.addSpanProcessor(production ? new BatchSpanProcessor(exporter.getExporter()) : new SimpleSpanProcessor(exporter.getExporter()));\n    }\n    /**\n     * convert String to Number (or undefined)\n     *\n     * @param value\n     * @returns number or undefined\n     */\n\n\n    convertStringToNumber(value) {\n      return value !== undefined ? Number(value) : undefined;\n    }\n    /**\n     * define the Probability Sampler\n     * By Default, it's always (or 1)\n     *\n     * @param sampleConfig the sample configuration\n     */\n\n\n    defineProbabilitySampler(sampleConfig) {\n      if (sampleConfig >= 1) {\n        return new ParentBasedSampler$1({\n          root: new AlwaysOnSampler$1()\n        });\n      } else if (sampleConfig <= 0 || sampleConfig === undefined) {\n        return new ParentBasedSampler$1({\n          root: new AlwaysOffSampler$1()\n        });\n      } else {\n        return new ParentBasedSampler$1({\n          root: new TraceIdRatioBasedSampler$1(sampleConfig)\n        });\n      }\n    }\n\n  }\n\n  InstrumentationService.ɵfac = function InstrumentationService_Factory(t) {\n    return new (t || InstrumentationService)(i0.ɵɵinject(OTEL_CONFIG), i0.ɵɵinject(OTEL_EXPORTER), i0.ɵɵinject(OTEL_PROPAGATOR), i0.ɵɵinject(OTEL_INSTRUMENTATION_PLUGINS));\n  };\n\n  InstrumentationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: InstrumentationService,\n    factory: InstrumentationService.ɵfac,\n    providedIn: 'root'\n  });\n  return InstrumentationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Otel Web Tracer Component\n */\n\n\nlet OtelWebTracerComponent = /*#__PURE__*/(() => {\n  class OtelWebTracerComponent {\n    /**\n     * Constructor\n     *\n     * @param instrumentationService InstrumentationService\n     */\n    constructor(instrumentationService) {\n      this.instrumentationService = instrumentationService;\n    }\n    /**\n     * Init Component\n     */\n\n\n    ngOnInit() {\n      this.instrumentationService.initInstrumentation();\n    }\n\n  }\n\n  OtelWebTracerComponent.ɵfac = function OtelWebTracerComponent_Factory(t) {\n    return new (t || OtelWebTracerComponent)(i0.ɵɵdirectiveInject(InstrumentationService));\n  };\n\n  OtelWebTracerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: OtelWebTracerComponent,\n    selectors: [[\"otel-instrumentation\"]],\n    decls: 0,\n    vars: 0,\n    template: function OtelWebTracerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return OtelWebTracerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet OtelWebTracerModule = /*#__PURE__*/(() => {\n  class OtelWebTracerModule {\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('OtelWebTracerModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n    static forRoot(config, configProvider) {\n      configProvider = defineConfigProvider(config, configProvider);\n      return {\n        ngModule: OtelWebTracerModule,\n        providers: [configProvider, InstrumentationService]\n      };\n    }\n\n  }\n\n  OtelWebTracerModule.ɵfac = function OtelWebTracerModule_Factory(t) {\n    return new (t || OtelWebTracerModule)(i0.ɵɵinject(OtelWebTracerModule, 12));\n  };\n\n  OtelWebTracerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OtelWebTracerModule\n  });\n  OtelWebTracerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return OtelWebTracerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of opentelemetry-interceptor\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AwsXrayPropagatorModule, B3PropagatorModule, CompositePropagatorModule, ConsoleSpanExporterModule, ConsoleSpanExporterService, JaegerHttpTracePropagatorModule, NoopSpanExporterModule, NoopSpanExporterService, NoopTextMapPropagatorModule, OTEL_CONFIG, OTEL_CUSTOM_SPAN, OTEL_EXPORTER, OTEL_INSTRUMENTATION_PLUGINS, OTEL_LOGGER, OTEL_PROPAGATOR, OpenTelemetryHttpInterceptor, OpenTelemetryInterceptorModule, OtelColExporterModule, OtelWebTracerComponent, OtelWebTracerModule, OtelcolExporterService, W3CTraceContextPropagatorModule, ZipkinExporterModule, ZipkinExporterService }; //# sourceMappingURL=jufab-opentelemetry-angular-interceptor.mjs.map","map":null,"metadata":{},"sourceType":"module"}