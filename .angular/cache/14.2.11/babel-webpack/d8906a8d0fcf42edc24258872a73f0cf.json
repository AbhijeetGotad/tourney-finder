{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Config } from '../../../../core/config/config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http) {\n      this.http = http;\n      this.email = '';\n      this.mobile = '';\n      this.organisationName = '';\n      this.sessionLogin = false;\n      this.baseUrl = Config.baseUrl;\n      this.genKeysURL = this.baseUrl + 'jct-login-i/genKey';\n      this.loginURL = this.baseUrl + 'jct-login-i/login';\n      this.BASE_URL = this.baseUrl + 'jct-login-i';\n      this.registerURL = this.baseUrl + 'jct-login-i/registerUser';\n    }\n\n    getRequestHeaders() {\n      return new HttpHeaders({\n        deviceid: this.deviceInfo\n      });\n    }\n\n    getGenkeys(payload) {\n      return this.http.post(this.genKeysURL, payload);\n    }\n\n    registerUser(payload) {\n      return this.http.post(this.registerURL, payload);\n    } // loginUser(payload: { username: any; password: any; oneTimeCode: any }) {\n\n\n    getKeyaPI(payload) {\n      return this.http.post(this.genKeysURL, payload);\n    }\n\n    loginUser(payload) {\n      return this.http.post(this.loginURL, payload, {\n        headers: this.getRequestHeaders()\n      });\n    }\n\n    saveDomain(payload) {\n      return this.http.post(this.BASE_URL + \"saveDomainUrl\", payload, {\n        headers: this.getRequestHeaders()\n      });\n    }\n\n    maskEmail(str) {\n      var s = str.split('@')[0];\n      var suffix = str.split('@')[1];\n      return this.maskDetails(s, 3) + '@' + suffix;\n    }\n\n    maskDetails(str, maskdiff = 2) {\n      var len = str.length;\n      var s1 = str.substring(maskdiff, len - maskdiff);\n      return str.replace(s1, '*'.repeat(s1.length));\n    }\n\n    checkEmailExist(payload) {\n      return this.http.post(this.BASE_URL + '/checkEmailExist', payload);\n    }\n\n    sendOTP(payload) {\n      return this.http.post(this.BASE_URL + '/sendOTP', payload);\n    }\n\n    validateOTP(payload) {\n      return this.http.post(this.BASE_URL + '/verifyEmailOTPSignUp', payload);\n    }\n\n    finishSignUpSetup(payload) {\n      return this.http.post(this.BASE_URL + '/saveDomainUrl', payload);\n    }\n\n    validateEmail(payload) {\n      return this.http.post(this.BASE_URL + '/validateEmail ', payload);\n    }\n\n    sendFPLink(payload) {\n      return this.http.post(this.BASE_URL + '/sendFPLink', payload);\n    }\n\n    validateFPLink(linkid) {\n      const headers = new HttpHeaders({\n        \"resetid\": linkid\n      }); // return this.http.get(this.checkFpLinkURL,{ headers})\n\n      return this.http.post(this.BASE_URL + '/validateFPLink ', {}, {\n        headers\n      });\n    }\n\n    saveResetPassword(payload) {\n      return this.http.post(this.BASE_URL + '/saveResetPassword ', payload);\n    }\n\n    logoutUser() {\n      return this.http.post(this.BASE_URL + '/logout ', {});\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}