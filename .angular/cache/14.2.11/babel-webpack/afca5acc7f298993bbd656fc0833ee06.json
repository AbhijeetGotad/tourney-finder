{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, globalErrorHandler } from '@opentelemetry/core';\n/**\n * Prepares send function that will send spans to the remote Zipkin service.\n * @param urlStr - url to send spans\n * @param headers - headers\n * send\n */\n\nexport function prepareSend(urlStr, headers) {\n  var xhrHeaders;\n  var useBeacon = typeof navigator.sendBeacon === 'function' && !headers;\n\n  if (headers) {\n    xhrHeaders = __assign({\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }, headers);\n  }\n  /**\n   * Send spans to the remote Zipkin service.\n   */\n\n\n  return function send(zipkinSpans, done) {\n    if (zipkinSpans.length === 0) {\n      diag.debug('Zipkin send with empty spans');\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n\n    var payload = JSON.stringify(zipkinSpans);\n\n    if (useBeacon) {\n      sendWithBeacon(payload, done, urlStr);\n    } else {\n      sendWithXhr(payload, done, urlStr, xhrHeaders);\n    }\n  };\n}\n/**\n * Sends data using beacon\n * @param data\n * @param done\n * @param urlStr\n */\n\nfunction sendWithBeacon(data, done, urlStr) {\n  if (navigator.sendBeacon(urlStr, data)) {\n    diag.debug('sendBeacon - can send', data);\n    done({\n      code: ExportResultCode.SUCCESS\n    });\n  } else {\n    done({\n      code: ExportResultCode.FAILED,\n      error: new Error(\"sendBeacon - cannot send \" + data)\n    });\n  }\n}\n/**\n * Sends data using XMLHttpRequest\n * @param data\n * @param done\n * @param urlStr\n * @param xhrHeaders\n */\n\n\nfunction sendWithXhr(data, done, urlStr, xhrHeaders) {\n  if (xhrHeaders === void 0) {\n    xhrHeaders = {};\n  }\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', urlStr);\n  Object.entries(xhrHeaders).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n\n    xhr.setRequestHeader(k, v);\n  });\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      var statusCode = xhr.status || 0;\n      diag.debug(\"Zipkin response status code: \" + statusCode + \", body: \" + data);\n\n      if (xhr.status >= 200 && xhr.status < 400) {\n        return done({\n          code: ExportResultCode.SUCCESS\n        });\n      } else {\n        return done({\n          code: ExportResultCode.FAILED,\n          error: new Error(\"Got unexpected status code from zipkin: \" + xhr.status)\n        });\n      }\n    }\n  };\n\n  xhr.onerror = function (msg) {\n    globalErrorHandler(new Error(\"Zipkin request error: \" + msg));\n    return done({\n      code: ExportResultCode.FAILED\n    });\n  }; // Issue request to remote service\n\n\n  diag.debug(\"Zipkin request payload: \" + data);\n  xhr.send(data);\n} //# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module"}