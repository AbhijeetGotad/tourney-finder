{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, TraceFlags, isSpanContextValid, isValidSpanId, isValidTraceId, INVALID_TRACEID, INVALID_SPANID, INVALID_SPAN_CONTEXT } from '@opentelemetry/api';\nexport var AWSXRAY_TRACE_ID_HEADER = 'x-amzn-trace-id';\nvar TRACE_HEADER_DELIMITER = ';';\nvar KV_DELIMITER = '=';\nvar TRACE_ID_KEY = 'Root';\nvar TRACE_ID_LENGTH = 35;\nvar TRACE_ID_VERSION = '1';\nvar TRACE_ID_DELIMITER = '-';\nvar TRACE_ID_DELIMITER_INDEX_1 = 1;\nvar TRACE_ID_DELIMITER_INDEX_2 = 10;\nvar TRACE_ID_FIRST_PART_LENGTH = 8;\nvar PARENT_ID_KEY = 'Parent';\nvar SAMPLED_FLAG_KEY = 'Sampled';\nvar IS_SAMPLED = '1';\nvar NOT_SAMPLED = '0';\n/**\n * Implementation of the AWS X-Ray Trace Header propagation protocol. See <a href=\n * https://https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>AWS\n * Tracing header spec</a>\n *\n * An example AWS Xray Tracing Header is shown below:\n * X-Amzn-Trace-Id: Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1\n */\n\nvar AWSXRayPropagator =\n/** @class */\nfunction () {\n  function AWSXRayPropagator() {}\n\n  AWSXRayPropagator.prototype.inject = function (context, carrier, setter) {\n    var _a;\n\n    var spanContext = (_a = trace.getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n    if (!spanContext || !isSpanContextValid(spanContext)) return;\n    var otTraceId = spanContext.traceId;\n    var timestamp = otTraceId.substring(0, TRACE_ID_FIRST_PART_LENGTH);\n    var randomNumber = otTraceId.substring(TRACE_ID_FIRST_PART_LENGTH);\n    var parentId = spanContext.spanId;\n    var samplingFlag = (TraceFlags.SAMPLED & spanContext.traceFlags) === TraceFlags.SAMPLED ? IS_SAMPLED : NOT_SAMPLED; // TODO: Add OT trace state to the X-Ray trace header\n\n    var traceHeader = \"Root=1-\" + timestamp + \"-\" + randomNumber + \";Parent=\" + parentId + \";Sampled=\" + samplingFlag;\n    setter.set(carrier, AWSXRAY_TRACE_ID_HEADER, traceHeader);\n  };\n\n  AWSXRayPropagator.prototype.extract = function (context, carrier, getter) {\n    var spanContext = this.getSpanContextFromHeader(carrier, getter);\n    if (!isSpanContextValid(spanContext)) return context;\n    return trace.setSpan(context, trace.wrapSpanContext(spanContext));\n  };\n\n  AWSXRayPropagator.prototype.fields = function () {\n    return [AWSXRAY_TRACE_ID_HEADER];\n  };\n\n  AWSXRayPropagator.prototype.getSpanContextFromHeader = function (carrier, getter) {\n    var headerKeys = getter.keys(carrier);\n    var relevantHeaderKey = headerKeys.find(function (e) {\n      return e.toLowerCase() === AWSXRAY_TRACE_ID_HEADER;\n    });\n\n    if (!relevantHeaderKey) {\n      return INVALID_SPAN_CONTEXT;\n    }\n\n    var traceHeader = getter.get(carrier, relevantHeaderKey);\n\n    if (!traceHeader || typeof traceHeader !== 'string') {\n      return INVALID_SPAN_CONTEXT;\n    }\n\n    var pos = 0;\n    var trimmedPart;\n    var parsedTraceId = INVALID_TRACEID;\n    var parsedSpanId = INVALID_SPANID;\n    var parsedTraceFlags = null;\n\n    while (pos < traceHeader.length) {\n      var delimiterIndex = traceHeader.indexOf(TRACE_HEADER_DELIMITER, pos);\n\n      if (delimiterIndex >= 0) {\n        trimmedPart = traceHeader.substring(pos, delimiterIndex).trim();\n        pos = delimiterIndex + 1;\n      } else {\n        //last part\n        trimmedPart = traceHeader.substring(pos).trim();\n        pos = traceHeader.length;\n      }\n\n      var equalsIndex = trimmedPart.indexOf(KV_DELIMITER);\n      var value = trimmedPart.substring(equalsIndex + 1);\n\n      if (trimmedPart.startsWith(TRACE_ID_KEY)) {\n        parsedTraceId = AWSXRayPropagator._parseTraceId(value);\n      } else if (trimmedPart.startsWith(PARENT_ID_KEY)) {\n        parsedSpanId = AWSXRayPropagator._parseSpanId(value);\n      } else if (trimmedPart.startsWith(SAMPLED_FLAG_KEY)) {\n        parsedTraceFlags = AWSXRayPropagator._parseTraceFlag(value);\n      }\n    }\n\n    if (parsedTraceFlags === null) {\n      return INVALID_SPAN_CONTEXT;\n    }\n\n    var resultSpanContext = {\n      traceId: parsedTraceId,\n      spanId: parsedSpanId,\n      traceFlags: parsedTraceFlags,\n      isRemote: true\n    };\n\n    if (!isSpanContextValid(resultSpanContext)) {\n      return INVALID_SPAN_CONTEXT;\n    }\n\n    return resultSpanContext;\n  };\n\n  AWSXRayPropagator._parseTraceId = function (xrayTraceId) {\n    // Check length of trace id\n    if (xrayTraceId.length !== TRACE_ID_LENGTH) {\n      return INVALID_TRACEID;\n    } // Check version trace id version\n\n\n    if (!xrayTraceId.startsWith(TRACE_ID_VERSION)) {\n      return INVALID_TRACEID;\n    } // Check delimiters\n\n\n    if (xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_1) !== TRACE_ID_DELIMITER || xrayTraceId.charAt(TRACE_ID_DELIMITER_INDEX_2) !== TRACE_ID_DELIMITER) {\n      return INVALID_TRACEID;\n    }\n\n    var epochPart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_1 + 1, TRACE_ID_DELIMITER_INDEX_2);\n    var uniquePart = xrayTraceId.substring(TRACE_ID_DELIMITER_INDEX_2 + 1, TRACE_ID_LENGTH);\n    var resTraceId = epochPart + uniquePart; // Check the content of trace id\n\n    if (!isValidTraceId(resTraceId)) {\n      return INVALID_TRACEID;\n    }\n\n    return resTraceId;\n  };\n\n  AWSXRayPropagator._parseSpanId = function (xrayParentId) {\n    return isValidSpanId(xrayParentId) ? xrayParentId : INVALID_SPANID;\n  };\n\n  AWSXRayPropagator._parseTraceFlag = function (xraySampledFlag) {\n    if (xraySampledFlag === NOT_SAMPLED) {\n      return TraceFlags.NONE;\n    }\n\n    if (xraySampledFlag === IS_SAMPLED) {\n      return TraceFlags.SAMPLED;\n    }\n\n    return null;\n  };\n\n  return AWSXRayPropagator;\n}();\n\nexport { AWSXRayPropagator }; //# sourceMappingURL=AWSXRayPropagator.js.map","map":null,"metadata":{},"sourceType":"module"}