{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, isValidSpanId, isValidTraceId, trace, TraceFlags } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3_DEBUG_FLAG_KEY } from './common';\nimport { X_B3_FLAGS, X_B3_PARENT_SPAN_ID, X_B3_SAMPLED, X_B3_SPAN_ID, X_B3_TRACE_ID } from './constants';\nvar VALID_SAMPLED_VALUES = new Set([true, 'true', 'True', '1', 1]);\nvar VALID_UNSAMPLED_VALUES = new Set([false, 'false', 'False', '0', 0]);\n\nfunction isValidSampledValue(sampled) {\n  return sampled === TraceFlags.SAMPLED || sampled === TraceFlags.NONE;\n}\n\nfunction parseHeader(header) {\n  return Array.isArray(header) ? header[0] : header;\n}\n\nfunction getHeaderValue(carrier, getter, key) {\n  var header = getter.get(carrier, key);\n  return parseHeader(header);\n}\n\nfunction getTraceId(carrier, getter) {\n  var traceId = getHeaderValue(carrier, getter, X_B3_TRACE_ID);\n\n  if (typeof traceId === 'string') {\n    return traceId.padStart(32, '0');\n  }\n\n  return '';\n}\n\nfunction getSpanId(carrier, getter) {\n  var spanId = getHeaderValue(carrier, getter, X_B3_SPAN_ID);\n\n  if (typeof spanId === 'string') {\n    return spanId;\n  }\n\n  return '';\n}\n\nfunction getDebug(carrier, getter) {\n  var debug = getHeaderValue(carrier, getter, X_B3_FLAGS);\n  return debug === '1' ? '1' : undefined;\n}\n\nfunction getTraceFlags(carrier, getter) {\n  var traceFlags = getHeaderValue(carrier, getter, X_B3_SAMPLED);\n  var debug = getDebug(carrier, getter);\n\n  if (debug === '1' || VALID_SAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.SAMPLED;\n  }\n\n  if (traceFlags === undefined || VALID_UNSAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.NONE;\n  } // This indicates to isValidSampledValue that this is not valid\n\n\n  return;\n}\n/**\n * Propagator for the B3 multiple-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\n\n\nvar B3MultiPropagator =\n/** @class */\nfunction () {\n  function B3MultiPropagator() {}\n\n  B3MultiPropagator.prototype.inject = function (context, carrier, setter) {\n    var spanContext = trace.getSpanContext(context);\n    if (!spanContext || !isSpanContextValid(spanContext) || isTracingSuppressed(context)) return;\n    var debug = context.getValue(B3_DEBUG_FLAG_KEY);\n    setter.set(carrier, X_B3_TRACE_ID, spanContext.traceId);\n    setter.set(carrier, X_B3_SPAN_ID, spanContext.spanId); // According to the B3 spec, if the debug flag is set,\n    // the sampled flag shouldn't be propagated as well.\n\n    if (debug === '1') {\n      setter.set(carrier, X_B3_FLAGS, debug);\n    } else if (spanContext.traceFlags !== undefined) {\n      // We set the header only if there is an existing sampling decision.\n      // Otherwise we will omit it => Absent.\n      setter.set(carrier, X_B3_SAMPLED, (TraceFlags.SAMPLED & spanContext.traceFlags) === TraceFlags.SAMPLED ? '1' : '0');\n    }\n  };\n\n  B3MultiPropagator.prototype.extract = function (context, carrier, getter) {\n    var traceId = getTraceId(carrier, getter);\n    var spanId = getSpanId(carrier, getter);\n    var traceFlags = getTraceFlags(carrier, getter);\n    var debug = getDebug(carrier, getter);\n\n    if (isValidTraceId(traceId) && isValidSpanId(spanId) && isValidSampledValue(traceFlags)) {\n      context = context.setValue(B3_DEBUG_FLAG_KEY, debug);\n      return trace.setSpanContext(context, {\n        traceId: traceId,\n        spanId: spanId,\n        isRemote: true,\n        traceFlags: traceFlags\n      });\n    }\n\n    return context;\n  };\n\n  B3MultiPropagator.prototype.fields = function () {\n    return [X_B3_TRACE_ID, X_B3_SPAN_ID, X_B3_FLAGS, X_B3_SAMPLED, X_B3_PARENT_SPAN_ID];\n  };\n\n  return B3MultiPropagator;\n}();\n\nexport { B3MultiPropagator }; //# sourceMappingURL=B3MultiPropagator.js.map","map":null,"metadata":{},"sourceType":"module"}