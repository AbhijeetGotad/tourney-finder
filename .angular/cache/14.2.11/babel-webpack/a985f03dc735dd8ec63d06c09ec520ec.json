{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nlet AddCompetitionModelComponent = class AddCompetitionModelComponent {\n  constructor(modalService, sanitizer) {\n    this.modalService = modalService;\n    this.sanitizer = sanitizer;\n    this.choosenFiles = [];\n    this.imageUrls = [];\n    this.acceptedFormats = [];\n    this.formatErrorString = '';\n    this.multiple = true;\n    this.locations = [];\n  }\n\n  onDragOver(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n  }\n\n  onDragLeave(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n  }\n\n  onDrop(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.checkFormats(evt, true);\n  }\n\n  ngOnInit() {\n    this.createFormatRegex();\n  }\n\n  createFormatRegex() {\n    let regexString = '';\n\n    for (let i = 0; i < this.acceptedFormats.length; i++) {\n      regexString = regexString + this.acceptedFormats[i];\n      regexString = regexString + '|';\n\n      if (i == this.acceptedFormats.length - 1 && this.acceptedFormats.length != 1) {\n        this.formatErrorString = this.formatErrorString + ' or ' + this.acceptedFormats[i];\n      } else if (this.acceptedFormats.length == 1) {\n        this.formatErrorString = this.acceptedFormats[i];\n      } else {\n        this.formatErrorString = this.formatErrorString + this.acceptedFormats[i] + ', ';\n      }\n    }\n\n    regexString = regexString.slice(0, -1);\n    this.formatRegex = new RegExp(regexString, 'i');\n  }\n\n  checkFormats(evt, fromDrop) {\n    let files = fromDrop ? evt.dataTransfer.files : evt.target.files;\n    let formatValid = true;\n\n    if (this.acceptedFormats.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        if (!this.formatRegex.test(files[i].name)) {\n          this.modalService.showMessage(`Please upload a file with ${this.formatErrorString} format(s)`, 'Error', 'warning-icon', 'Close');\n          formatValid = false;\n          return;\n        } else if (this.fileSizeLimit && files[i].size > this.fileSizeLimit) {\n          this.modalService.showMessage(`Please upload a file with size less than ${this.fileSizeLimit !== 0 ? this.fileSizeLimit / 1000000 : this.fileSizeLimit} MB.`, 'Error', 'warning-icon', 'Close');\n          formatValid = false;\n          return;\n        }\n      }\n    }\n\n    if (this.maxSize) {\n      for (let i = 0; i < files.length; i++) {\n        if (files[i].size > this.acceptedFileSize) {\n          this.modalService.showMessage(`Please upload a file with size less than ${this.maxSize}`, 'Error', 'warning-icon', 'Close');\n          formatValid = false;\n          return;\n        }\n      }\n    }\n\n    if (formatValid) {\n      this.uploadFiles(evt, fromDrop);\n    }\n  }\n\n  uploadFiles(evt, fromDrop) {\n    const files = fromDrop ? evt.dataTransfer.files : evt.target.files;\n\n    if (files.length > 0) {\n      let fileLength = this.choosenFiles.length == 0 ? files.length : this.choosenFiles.length;\n\n      if (this.multiple) {\n        if (fileLength >= this.maxUploadLimit && this.choosenFiles.length != 0) {\n          this.modalService.showMessage(`Cannot upload more than ${this.maxUploadLimit} file(s)`, 'Error', 'warning-icon', 'Close');\n          return;\n        } else {\n          this.uploadMultipleFiles(files);\n        }\n      } else {\n        if (fileLength >= 1 && this.choosenFiles.length != 0) {\n          this.modalService.showMessage('Cannot upload more than 1 file', 'Error', 'warning-icon', 'Close');\n          return;\n        } else {\n          this.uploadMultipleFiles(files);\n        }\n      }\n    }\n  }\n\n  uploadMultipleFiles(files) {\n    for (let i = 0; i < files.length; i++) {\n      this.choosenFiles.push(files[i]);\n      let reader = new FileReader();\n      reader.readAsDataURL(files[i]);\n\n      reader.onloadend = e => {\n        let file = this.sanitizer.bypassSecurityTrustUrl(e.target.result.toString());\n        this.imageUrls.push(file);\n      };\n    }\n  }\n\n  deleteFile(file) {\n    this.modalService.showConfirmation('Are you sure you want to delete the selected file?', 'Confirmation', 'confirmation-icon', reason => {\n      if (reason === 'YES') {\n        let fileIndex = this.choosenFiles.indexOf(file);\n        this.choosenFiles.splice(fileIndex, 1);\n        this.imageUrls.splice(fileIndex, 1);\n      }\n    });\n  }\n\n  uploadExistingFiles(files) {\n    for (let i = 0; i < files.length; i++) {\n      this.choosenFiles.push(files[i]);\n    }\n  }\n\n};\n\n__decorate([HostListener('dragover', ['$event'])], AddCompetitionModelComponent.prototype, \"onDragOver\", null);\n\n__decorate([HostListener('dragleave', ['$event'])], AddCompetitionModelComponent.prototype, \"onDragLeave\", null);\n\n__decorate([HostListener('drop', ['$event'])], AddCompetitionModelComponent.prototype, \"onDrop\", null);\n\nAddCompetitionModelComponent = __decorate([Component({\n  selector: 'app-add-competition-model',\n  templateUrl: './add-competition-model.component.html',\n  styleUrls: ['./add-competition-model.component.css']\n})], AddCompetitionModelComponent);\nexport { AddCompetitionModelComponent };","map":null,"metadata":{},"sourceType":"module"}