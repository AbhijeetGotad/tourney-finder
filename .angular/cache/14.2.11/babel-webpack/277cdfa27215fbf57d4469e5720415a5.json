{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Config } from 'src/app/core/config/config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./signUp.service\";\nimport * as i2 from \"../login-page/login.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/core/services/message-modal-service\";\nimport * as i5 from \"src/app/homepage-root/services/homepage.service\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/dialog\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/forms\";\nconst _c0 = [\"formRow\"];\n\nconst _c1 = function () {\n  return [\"/signup\"];\n};\n\nconst nacl = require('tweetnacl');\n\nexport let SignUpPageComponent = /*#__PURE__*/(() => {\n  class SignUpPageComponent {\n    constructor(signUpService, loginSrv, router, messageService, homeSer) {\n      this.signUpService = signUpService;\n      this.loginSrv = loginSrv;\n      this.router = router;\n      this.messageService = messageService;\n      this.homeSer = homeSer;\n      this.hide = true; // orgList: any = [];\n\n      this.errorMessage = '';\n      this.message = '';\n      this.field = '';\n      this.noOfAttempts = 0;\n      this.step = 0;\n      this.isuserLocked = false;\n      this.signupTimer = 0;\n    }\n\n    ngOnInit() {\n      // this.homeSer.loggedPage = true;\n      this.initaliseForm(); // this.organisationList();\n    }\n\n    initaliseForm() {\n      this.signupForm = new FormGroup({\n        firstName: new FormControl('', Validators.required),\n        lastName: new FormControl('', Validators.required),\n        email: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n        password: new FormControl('', Validators.compose([Validators.required, Validators.pattern(Config.pwdRegex)])),\n        orgName: new FormControl('', Validators.required),\n        url: new FormControl('')\n      });\n    } // organisationList() {\n    //   this.signUpService.organisationList().subscribe((response: any) => {\n    //     if (response.status === 'Success') {\n    //       this.orgList = response.message;\n    //     }\n    //   });\n    // }\n\n\n    clearError() {\n      this.message = '';\n    }\n\n    registerUser() {\n      if (this.step == 0) {\n        let payloads = {\n          emailId: this.signupForm.value.email\n        };\n        this.validateEmail(payloads);\n      } else if (this.step == 1) {\n        this.signupForm.controls[\"url\"].clearValidators();\n        this.step++;\n      } else if (this.step == 3) {\n        this.homeSer.loggedPage = true;\n        let payloadData = {\n          emailId: this.signupForm.value.email\n        };\n        this.loginSrv.getGenkeys(payloadData).subscribe(data => {\n          if (data.result) {\n            this.publicKey = new Uint8Array(data.result.publicKey);\n            this.secretKey = new Uint8Array(data.result.secretKey);\n            this.one_time_code = nacl.randomBytes(24);\n            this.cipher_text = nacl.box(nacl.util.decodeUTF8(this.signupForm.value.password), this.one_time_code, this.publicKey, this.secretKey);\n            let payload = {\n              email: this.signupForm.value.email,\n              firstName: this.signupForm.value.firstName,\n              lastName: this.signupForm.value.lastName,\n              organisationName: this.signupForm.value.orgName,\n              password: this.cipher_text,\n              OneTimeCode: this.one_time_code,\n              domain: this.signupForm.value.url\n            }; //  if(!this.forgotPassword){\n\n            this.loginSrv.registerUser(payload).subscribe(res => {\n              if (res.status == 'Success') {\n                // this.cookieService.delete('JFSSSO','/')\n                this.signUpService.isSignUp = true;\n                this.loginSrv.email = this.signupForm.value.email;\n                this.loginSrv.organisationName = this.signupForm.value.orgName;\n                this.step++;\n                this.router.navigate(['/login']);\n              } else {\n                // this.signUpService.tenantId = '';\n                this.messageService.showMessage(res === null || res === void 0 ? void 0 : res.message, \"Error\", \"warning-icon\", \"CLOSE\");\n              }\n            }, err => {\n              var _a;\n\n              this.message = (_a = err.error) === null || _a === void 0 ? void 0 : _a.message;\n            });\n          } else {//  this.onSubmit()\n          }\n        }, error => {\n          var _a;\n\n          this.message = (_a = error.error) === null || _a === void 0 ? void 0 : _a.message;\n        });\n      } else if (this.step == 2) {\n        this.signupForm.controls[\"url\"].addValidators([Validators.required, Validators.pattern(Config.domainRegex)]);\n        this.step++;\n      }\n    }\n\n    onSubmitOtp(event) {\n      let payload = {\n        otp: +event,\n        email: this.signupForm.value.email,\n        flag: 'e'\n      };\n      this.verifyOTP(payload);\n    }\n\n    validateEmail(payload) {\n      this.loginSrv.checkEmailExist(payload).subscribe(response => {\n        var _a, _b;\n\n        if ((_a = response === null || response === void 0 ? void 0 : response.message) === null || _a === void 0 ? void 0 : _a.status) {\n          let payload = {\n            flag: 'e',\n            email: this.signupForm.value.email\n          };\n          this.loginSrv.email = this.signupForm.value.email;\n          this.generateOTP(payload);\n        } else {\n          this.message = (_b = response === null || response === void 0 ? void 0 : response.message) === null || _b === void 0 ? void 0 : _b.msg;\n        }\n      }, error => {\n        var _a, _b;\n\n        this.message = (_b = (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.msg;\n      });\n    }\n\n    clearMessage() {\n      this.message = '';\n    }\n\n    onChangeEmail() {\n      this.step--;\n    }\n\n    generateOTP(payload) {\n      this.loginSrv.sendOTP(payload).subscribe(response => {\n        var _a, _b;\n\n        if ((response === null || response === void 0 ? void 0 : response.status) === 'Success') {\n          this.step++;\n        } else {\n          this.field = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.message;\n          this.message = (_b = response === null || response === void 0 ? void 0 : response.body) === null || _b === void 0 ? void 0 : _b.field;\n        }\n      }, error => {\n        this.message = error.error.message;\n        this.field = error.error.field ? error.error.field : '';\n        this.signupTimer = error.error.ttl; // if(this.signupTimer > 0){\n        //   this.signupTimerSub?.unsubscribe()\n        //   // this.startTimer();\n        // }\n      });\n    }\n\n    verifyOTP(payload) {\n      this.loginSrv.validateOTP(payload).subscribe(response => {\n        var _a, _b;\n\n        if ((response === null || response === void 0 ? void 0 : response.status) === 'Success') {\n          this.step++;\n          this.clearMessage();\n        } else {\n          this.field = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.message;\n          this.message = (_b = response === null || response === void 0 ? void 0 : response.body) === null || _b === void 0 ? void 0 : _b.field;\n        }\n      }, error => {\n        this.message = error.error.message;\n        this.field = error.error.field ? error.error.field : '';\n        this.errorMessage = error.error.message;\n        this.isuserLocked = error.error.isLocked;\n        this.noOfAttempts = error.error.attempt;\n      });\n    }\n\n    getErrorMessage(type) {\n      if (this.signupForm.controls['email'].hasError('required') && type == 'email') {\n        return 'Email ID is required';\n      } else {\n        return '';\n      }\n    }\n\n    checkFormValidity() {\n      if (this.step === 0) {\n        return !this.signupForm.controls['email'].valid;\n      } else if (this.step === 1) {\n        return !this.signupForm.controls['email'].valid;\n      } else if (this.step === 2) {\n        return !this.signupForm.valid;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  SignUpPageComponent.ɵfac = function SignUpPageComponent_Factory(t) {\n    return new (t || SignUpPageComponent)(i0.ɵɵdirectiveInject(i1.SignUpService), i0.ɵɵdirectiveInject(i2.LoginService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MessageModalService), i0.ɵɵdirectiveInject(i5.HomepageService));\n  };\n\n  SignUpPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignUpPageComponent,\n    selectors: [[\"app-sign-up-page\"]],\n    viewQuery: function SignUpPageComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rows = _t);\n      }\n    },\n    decls: 55,\n    vars: 4,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutAlign\", \"space-between none\", 1, \"upload-audio-root\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\", 1, \"grid-layout-row\", \"header-modal-action\"], [\"mat-dialog-title\", \"\", 1, \"no-margin\", \"header\"], [\"mat-dialog-close\", \"\", 1, \"cursor-pointer\", \"ico-small\"], [1, \"content-modal-action\", \"bottom-container\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"24px\", 3, \"formGroup\"], [\"fxLayoutAlign\", \"center center\", 1, \"heading-section\", \"mb-20\", \"mt-10\"], [1, \"extra-bolder\", \"heading\", \"no-margin\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\", \"fxLayoutAlign\", \"flex-start flex-start\", \"fxLayoutGap\", \"30px\", 1, \"bottom-container\"], [\"fxLayout\", \"column\", 1, \"bottom-container\"], [\"fxLayoutAlign\", \"center stretch\", \"fxLayout\", \"column\", 1, \"grid-layout-column\"], [\"fxFlex\", \"100\", \"fxLayout.gt-xs\", \"row\", \"fxLayout.xs\", \"column\", \"fxLayoutGap\", \"2%\"], [\"fxLayout\", \"column\", \"fxFlex.gt-xs\", \"49\", \"fxFlex.xs\", \"100\", 1, \"no-label\"], [1, \"font-weight-light\", \"primary-text\", \"mb-5\"], [1, \"error-text\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"firstName\", \"placeholder\", \"First Name\"], [\"fxLayout\", \"column\", \"fxFlex.gt-xs\", \"49\", \"fxFlex.xs\", \"100\", 1, \"outline-input\", \"no-label\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"lastName\", \"placeholder\", \"Last Name\"], [\"fxLayout\", \"column\", \"fxFlex.gt-xs\", \"100\", \"fxFlex.xs\", \"100\", 1, \"outline-input\", \"no-label\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\"], [1, \"large-primary-button\", \"full-width\"], [\"fxLayoutAlign\", \"start center\", 1, \"full-width\", \"mt-15\", \"mb-10\"], [1, \"\"], [1, \"primary-text\", \"cursor-pointer\", \"bold\", 3, \"routerLink\"]],\n    template: function SignUpPageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-icon\", 3);\n        i0.ɵɵtext(5, \"close\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"form\", 5)(8, \"div\", 6)(9, \"h1\", 7);\n        i0.ɵɵtext(10, \" Welcome \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Let's get started with few simple steps\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"div\", 12)(18, \"label\", 13);\n        i0.ɵɵtext(19, \"First Name\");\n        i0.ɵɵelementStart(20, \"span\", 14);\n        i0.ɵɵtext(21, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"mat-form-field\");\n        i0.ɵɵelement(23, \"input\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"div\", 16)(25, \"label\", 13);\n        i0.ɵɵtext(26, \"Last Name\");\n        i0.ɵɵelementStart(27, \"span\", 14);\n        i0.ɵɵtext(28, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"mat-form-field\");\n        i0.ɵɵelement(30, \"input\", 17);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(31, \"div\", 11)(32, \"div\", 18)(33, \"label\", 13);\n        i0.ɵɵtext(34, \"Email\");\n        i0.ɵɵelementStart(35, \"span\", 14);\n        i0.ɵɵtext(36, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"mat-form-field\");\n        i0.ɵɵelement(38, \"input\", 19);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(39, \"div\", 11)(40, \"div\", 18)(41, \"label\", 13);\n        i0.ɵɵtext(42, \"Password\");\n        i0.ɵɵelementStart(43, \"span\", 14);\n        i0.ɵɵtext(44, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(45, \"mat-form-field\");\n        i0.ɵɵelement(46, \"input\", 20);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(47, \"button\", 21);\n        i0.ɵɵtext(48);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(49, \"div\", 22)(50, \"p\")(51, \"span\", 23);\n        i0.ɵɵtext(52, \"Already have an account?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"span\", 24);\n        i0.ɵɵtext(54, \"\\u00A0Login\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.signupForm);\n        i0.ɵɵadvance(41);\n        i0.ɵɵtextInterpolate1(\" \", \"Proceed\", \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c1));\n      }\n    },\n    dependencies: [i3.RouterLink, i6.DefaultLayoutDirective, i6.DefaultLayoutGapDirective, i6.DefaultLayoutAlignDirective, i6.DefaultFlexDirective, i7.MatIcon, i8.MatDialogClose, i8.MatDialogTitle, i9.MatFormField, i10.MatInput, i11.ɵNgNoValidate, i11.DefaultValueAccessor, i11.NgControlStatus, i11.NgControlStatusGroup, i11.FormGroupDirective, i11.FormControlName],\n    styles: [\".signup-container{width:100%;height:100vh;background:var(--global-black);opacity:.85;-webkit-backdrop-filter:blur(2px);backdrop-filter:blur(2px);z-index:6}.signup-container .signup-form{width:500px}.signup-container .signup-form .primary-btn{border-radius:50px;font-size:var(--font-size-sub-title)}.signup-container .heading{color:var(--global-black);font-size:var(--font-size-big-head)}.signup-container .signup-card{padding:32px!important;border-radius:16px;box-shadow:0 4px 16px #00000014;width:100%;min-height:320px}.signup-container .otp-close-ico{position:absolute;right:24px;top:20px}.signup-container .signup-card .mat-form-field-subscript-wrapper{top:calc(100% + .333333em)!important}@media only screen and (max-width: 599px){.signup-container .signup-form{min-width:300px;width:100%}}\\n\"],\n    encapsulation: 2\n  });\n  return SignUpPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}