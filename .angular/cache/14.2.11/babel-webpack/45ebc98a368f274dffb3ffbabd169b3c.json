{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ValidationDirective = /*#__PURE__*/(() => {\n  class ValidationDirective {\n    constructor(el) {\n      this.el = el;\n      this.numericOnly = false;\n      this.allowSpace = false;\n      this.alphabetsOnly = false;\n      this.alphaNumericOnly = false;\n    }\n\n    input() {\n      if (this.alphaNumericOnly) {\n        const regex = this.allowSpace ? /[^a-zA-Z0-9 ]/g : /[^a-zA-Z0-9]/g;\n        this.el.nativeElement.value = this.el.nativeElement.value.replace(regex, '');\n      } else if (this.alphabetsOnly) {\n        const regex = this.allowSpace ? /[^a-zA-Z ]/g : /[^a-zA-Z]/g;\n        this.el.nativeElement.value = this.el.nativeElement.value.replace(regex, '');\n      } else if (this.numericOnly) {\n        const regex = this.allowSpace ? /[^0-9 ]/g : /[^0-9]/g;\n        this.el.nativeElement.value = this.el.nativeElement.value.replace(regex, '');\n      }\n    }\n\n  }\n\n  ValidationDirective.ɵfac = function ValidationDirective_Factory(t) {\n    return new (t || ValidationDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ValidationDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ValidationDirective,\n    selectors: [[\"\", \"appValidation\", \"\"]],\n    hostBindings: function ValidationDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function ValidationDirective_input_HostBindingHandler($event) {\n          return ctx.input($event);\n        });\n      }\n    },\n    inputs: {\n      numericOnly: \"numericOnly\",\n      allowSpace: \"allowSpace\",\n      alphabetsOnly: \"alphabetsOnly\",\n      alphaNumericOnly: \"alphaNumericOnly\"\n    }\n  });\n  return ValidationDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}