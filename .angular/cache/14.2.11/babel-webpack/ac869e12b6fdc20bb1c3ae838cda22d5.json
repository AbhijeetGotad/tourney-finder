{"ast":null,"code":"import { EventEmitter, SimpleChanges } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../core/services/message-modal-service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/button\";\nconst _c0 = [\"fileDropRef\"];\n\nfunction AttachDragDropComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"click\", function AttachDragDropComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n\n      const _r2 = i0.ɵɵreference(7);\n\n      return i0.ɵɵresetView(_r2 == null ? null : _r2.click());\n    });\n    i0.ɵɵelementStart(1, \"div\")(2, \"div\", 4);\n    i0.ɵɵelement(3, \"button\", 5);\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 6, 7);\n    i0.ɵɵlistener(\"change\", function AttachDragDropComponent_div_0_Template_input_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.checkFormats($event, false));\n    });\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"max-width\", ctx_r0.dragMaxWidth, \"px\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.attachmentText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"multiple\", ctx_r0.multiple);\n  }\n}\n\nfunction AttachDragDropComponent_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(file_r6.name);\n  }\n}\n\nfunction AttachDragDropComponent_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const file_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(file_r6);\n  }\n}\n\nfunction AttachDragDropComponent_div_2_img_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"img\", 15);\n    i0.ɵɵlistener(\"click\", function AttachDragDropComponent_div_2_img_6_Template_img_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const file_r6 = i0.ɵɵnextContext().$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.deleteFile(file_r6));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AttachDragDropComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9);\n    i0.ɵɵtemplate(2, AttachDragDropComponent_div_2_div_2_Template, 2, 1, \"div\", 10);\n    i0.ɵɵtemplate(3, AttachDragDropComponent_div_2_div_3_Template, 2, 1, \"div\", 10);\n    i0.ɵɵelementStart(4, \"div\", 11)(5, \"img\", 12);\n    i0.ɵɵlistener(\"click\", function AttachDragDropComponent_div_2_Template_img_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const i_r7 = restoredCtx.index;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.emitViewEvent(i_r7));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AttachDragDropComponent_div_2_img_6_Template, 1, 0, \"img\", 13);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const file_r6 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", file_r6 == null ? null : file_r6.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !file_r6.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.viewOnly);\n  }\n}\n\nexport let AttachDragDropComponent = /*#__PURE__*/(() => {\n  class AttachDragDropComponent {\n    constructor(modalService, sanitizer) {\n      this.modalService = modalService;\n      this.sanitizer = sanitizer;\n      this.existingFilesArray = [];\n      this.onUploadClear = false;\n      this.acceptedFileSize = 0;\n      this.formatErrorString = \"\";\n      this.choosenFiles = [];\n      this.imageUrls = [];\n      this.filesDropped = new EventEmitter();\n      this.filesDeleted = new EventEmitter();\n      this.viewClicked = new EventEmitter();\n      this.errorEvent = new EventEmitter();\n    }\n\n    onDragOver(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n\n    onDragLeave(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n\n    onDrop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.checkFormats(evt, true);\n    }\n\n    ngOnChanges(changes) {\n      if (this.onUploadClear) {\n        this.choosenFiles = [];\n        return;\n      } // to refelect existingFIleCahnges on view\n\n\n      if (changes.existingFilesArray && changes.existingFilesArray.currentValue && changes.existingFilesArray.currentValue.length > 0) {\n        if (this.choosenFiles.length == 0) {\n          console.log(\"exisiting file choosenFiles length is zero\");\n          this.uploadExistingFiles(this.existingFilesArray);\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.acceptedFormats = this.acceptedFormats != undefined ? this.acceptedFormats : [];\n      this.createFormatRegex();\n      this.maxSize != undefined ? this.maxSize : \"\";\n\n      if (this.maxSize) {\n        this.createMaxSize();\n      }\n\n      if (this.multiple == undefined) {\n        this.multiple = false;\n      }\n\n      if (this.multiple && this.maxUploadLimit == undefined) {\n        this.maxUploadLimit = 2;\n      } else if (!this.multiple && this.maxUploadLimit == undefined) {\n        this.maxUploadLimit = 1;\n      } else if (!this.multiple && this.maxUploadLimit > 1) {\n        this.maxUploadLimit = 1;\n      }\n\n      if (this.existingFilesArray && this.choosenFiles.length == 0) {\n        this.existingFilesArray.length > 0 ? this.uploadExistingFiles(this.existingFilesArray) : \"\";\n      }\n    }\n\n    createMaxSize() {\n      let fileSizeSuffix = this.maxSize.slice(-2).toLowerCase();\n      let fileSizePrefix = this.maxSize.slice(0, -2);\n      fileSizePrefix = fileSizePrefix;\n      let fileSizeInto;\n\n      if (fileSizeSuffix == \"kb\") {\n        fileSizeInto = 1;\n      } else if (fileSizeSuffix == \"mb\") {\n        fileSizeInto = 2;\n      }\n\n      this.acceptedFileSize = fileSizePrefix * Math.pow(1024, fileSizeInto);\n      this.maxSize = fileSizePrefix + fileSizeSuffix.toUpperCase();\n    }\n\n    createFormatRegex() {\n      let regexString = \"\";\n\n      for (let i = 0; i < this.acceptedFormats.length; i++) {\n        regexString = regexString + this.acceptedFormats[i];\n        regexString = regexString + \"|\";\n\n        if (i == this.acceptedFormats.length - 1 && this.acceptedFormats.length != 1) {\n          this.formatErrorString = this.formatErrorString + \" or \" + this.acceptedFormats[i];\n        } else if (this.acceptedFormats.length == 1) {\n          this.formatErrorString = this.acceptedFormats[i];\n        } else {\n          this.formatErrorString = this.formatErrorString + this.acceptedFormats[i] + \", \";\n        }\n      }\n\n      regexString = regexString.slice(0, -1);\n      this.formatRegex = new RegExp(regexString, \"i\");\n    }\n\n    checkFormats(evt, fromDrop) {\n      let files = fromDrop ? evt.dataTransfer.files : evt.target.files;\n      let formatValid = true;\n\n      if (this.acceptedFormats.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          if (!this.formatRegex.test(files[i].name)) {\n            this.modalService.showMessage(`Please upload a file with ${this.formatErrorString} format(s)`, \"Error\", \"warning-icon\", \"Close\");\n            formatValid = false;\n          } else if (this.fileSizeLimit && files[i].size > this.fileSizeLimit) {\n            this.modalService.showMessage(`Please upload a file with size less than ${this.fileSizeLimit !== 0 ? this.fileSizeLimit / 1000000 : this.fileSizeLimit} MB.`, \"Error\", \"warning-icon\", \"Close\");\n            formatValid = false;\n          }\n        }\n      }\n\n      if (this.maxSize) {\n        for (let i = 0; i < files.length; i++) {\n          if (files[i].size > this.acceptedFileSize) {\n            this.modalService.showMessage(`Please upload a file with size less than ${this.maxSize}`, \"Error\", \"warning-icon\", \"Close\");\n            formatValid = false;\n          }\n        }\n      }\n\n      if (formatValid) {\n        this.uploadFiles(evt, fromDrop);\n      }\n    }\n\n    uploadFiles(evt, fromDrop) {\n      this.fileOver = false;\n      const files = fromDrop ? evt.dataTransfer.files : evt.target.files;\n\n      if (files.length > 0) {\n        let fileLength = this.choosenFiles.length == 0 ? files.length : this.choosenFiles.length;\n\n        if (this.multiple) {\n          if (fileLength >= this.maxUploadLimit && this.choosenFiles.length != 0) {\n            this.modalService.showMessage(`Cannot upload more than ${this.maxUploadLimit} file(s)`, \"Error\", \"warning-icon\", \"Close\");\n            return;\n          } else {\n            this.uploadMultipleFiles(files);\n          }\n        } else {\n          if (fileLength >= 1 && this.choosenFiles.length != 0) {\n            this.modalService.showMessage(\"Cannot upload more than 1 file\", \"Error\", \"warning-icon\", \"Close\");\n            return;\n          } else {\n            this.uploadMultipleFiles(files);\n          }\n        }\n      }\n    }\n\n    uploadMultipleFiles(files) {\n      for (let i = 0; i < files.length; i++) {\n        this.choosenFiles.push(files[i]);\n        let reader = new FileReader();\n        reader.readAsDataURL(files[i]);\n\n        reader.onloadend = e => {\n          let file = this.sanitizer.bypassSecurityTrustUrl(e.target.result.toString());\n          this.imageUrls.push(file);\n        };\n      }\n\n      let emittedResult = {\n        files: this.choosenFiles,\n        imageUrls: this.imageUrls\n      };\n      this.filesDropped.emit(emittedResult);\n    }\n\n    emitViewEvent(index) {\n      let emittedResult = {\n        fileClicked: this.choosenFiles[index],\n        imageUrlClicked: this.imageUrls[index],\n        index: index\n      };\n      this.viewClicked.emit(emittedResult);\n    }\n\n    deleteFile(file) {\n      this.modalService.showConfirmation(\"Are you sure you want to delete the selected file?\", \"Confirmation\", \"confirmation-icon\", reason => {\n        if (reason === \"YES\") {\n          let fileIndex = this.choosenFiles.indexOf(file);\n          this.choosenFiles.splice(fileIndex, 1);\n          this.imageUrls.splice(fileIndex, 1);\n          let emittedResult = {\n            files: this.choosenFiles,\n            imageUrls: this.imageUrls,\n            fileRemoved: file\n          };\n          this.filesDeleted.emit(emittedResult);\n        }\n      });\n    }\n\n    uploadExistingFiles(files) {\n      for (let i = 0; i < files.length; i++) {\n        this.choosenFiles.push(files[i]);\n      }\n    }\n\n  }\n\n  AttachDragDropComponent.ɵfac = function AttachDragDropComponent_Factory(t) {\n    return new (t || AttachDragDropComponent)(i0.ɵɵdirectiveInject(i1.MessageModalService), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n  };\n\n  AttachDragDropComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttachDragDropComponent,\n    selectors: [[\"app-attach-drag-drop\"]],\n    viewQuery: function AttachDragDropComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileDropRef = _t.first);\n      }\n    },\n    hostBindings: function AttachDragDropComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function AttachDragDropComponent_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function AttachDragDropComponent_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function AttachDragDropComponent_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      attachmentText: \"attachmentText\",\n      maxSize: \"maxSize\",\n      multiple: \"multiple\",\n      maxUploadLimit: \"maxUploadLimit\",\n      acceptedFormats: \"acceptedFormats\",\n      fileSizeLimit: \"fileSizeLimit\",\n      existingFilesArray: \"existingFilesArray\",\n      viewOnly: \"viewOnly\",\n      dragMaxWidth: \"dragMaxWidth\",\n      onUploadClear: \"onUploadClear\"\n    },\n    outputs: {\n      filesDropped: \"filesDropped\",\n      filesDeleted: \"filesDeleted\",\n      viewClicked: \"viewClicked\",\n      errorEvent: \"errorEvent\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"attach-drag-drop cursor-pointer\", 3, \"click\", 4, \"ngIf\"], [\"fxLayout\", \"row wrap\", \"fxLayoutGap\", \"15px\", 1, \"attach-drag-drop\"], [\"class\", \"mb-5\", 4, \"ngFor\", \"ngForOf\"], [1, \"attach-drag-drop\", \"cursor-pointer\", 3, \"click\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"10px\", \"fxLayoutAlign\", \"center center\", 1, \"drag-drop-container\"], [\"type\", \"button\", \"mat-icon-button\", \"\", 1, \"upload-ico\"], [\"type\", \"file\", 1, \"hidden\", 3, \"multiple\", \"change\"], [\"fileDropRef\", \"\"], [1, \"mb-5\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"30px\", 1, \"attached-file-wrapper\"], [\"class\", \"word-break-all\", 4, \"ngIf\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"10px\"], [\"src\", \"assets/images/svg/view-ico.svg\", 1, \"ico-extra-small\", \"cursor-pointer\", 3, \"click\"], [\"src\", \"assets/images/svg/delete-ico.svg\", \"class\", \"ico-extra-small cursor-pointer\", 3, \"click\", 4, \"ngIf\"], [1, \"word-break-all\"], [\"src\", \"assets/images/svg/delete-ico.svg\", 1, \"ico-extra-small\", \"cursor-pointer\", 3, \"click\"]],\n    template: function AttachDragDropComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AttachDragDropComponent_div_0_Template, 8, 4, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, AttachDragDropComponent_div_2_Template, 7, 3, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.multiple && !ctx.viewOnly || !ctx.multiple && !ctx.viewOnly && ctx.choosenFiles.length == 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.choosenFiles);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.DefaultLayoutDirective, i4.DefaultLayoutGapDirective, i4.DefaultLayoutAlignDirective, i5.MatButton],\n    styles: [\".attach-drag-drop .drag-drop-container{background:var(--global-white) 0% 0% no-repeat padding-box;box-shadow:0 0 6px var(--box-shadow-color);border:1px dashed var(--grey-60);border-radius:10px;height:70px;padding:10px;margin-bottom:5px}.attach-drag-drop .drag-drop-container button.upload-ico{background-image:url(dragdrop-upload-ico.svg);background-size:contain;background-position:center;background-repeat:no-repeat;width:20px;height:20px;border-radius:0}.attach-drag-drop .attached-file-wrapper{border:1px solid var(--grey-60);border-radius:40px;padding:10px;background:var(--global-white)}\\n\"],\n    encapsulation: 2\n  });\n  return AttachDragDropComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}