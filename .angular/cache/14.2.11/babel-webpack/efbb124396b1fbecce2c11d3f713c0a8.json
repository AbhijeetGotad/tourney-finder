{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Config } from '../../core/config/config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OtpVerificationService = /*#__PURE__*/(() => {\n  class OtpVerificationService {\n    constructor(http) {\n      this.http = http;\n      this.forgotPassword = true;\n      this.fpMessage = '';\n      this.resetMessage = '';\n      this.baseUrl = Config.baseUrl;\n      this.sendOtpURL = this.baseUrl + 'login-i/sendOTP';\n      this.verifyOtpURL = this.baseUrl + 'login-i/verifyOTP';\n      this.verifySignUpOtpURL = this.baseUrl + 'login-i/verifyOTPSignUp';\n      this.setPwdURL = this.baseUrl + 'login-i/registerUser';\n      this.sendFpOtpURL = this.baseUrl + 'login-i/VerifyUserSendFPOTP';\n      this.verifyFpOtpURL = this.baseUrl + 'login-i/verifyFPOTPSendMail';\n      this.checkFpLinkURL = this.baseUrl + 'login-i/validateFPLink';\n      this.resetPwdURL = this.baseUrl + 'login-i/saveResetPassword';\n    }\n\n    sendOTP(payload) {\n      return this.http.post(this.sendOtpURL, payload);\n    }\n\n    verifyOTP(payload) {\n      return this.http.post(this.verifyOtpURL, payload);\n    }\n\n    verifysignupOTP(payload) {\n      return this.http.post(this.verifySignUpOtpURL, payload);\n    }\n\n    setPassword(payload) {\n      return this.http.post(this.setPwdURL, payload, {\n        observe: 'response'\n      });\n    }\n\n    sendFPOTP(payload) {\n      return this.http.post(this.sendFpOtpURL, payload);\n    }\n\n    verifyFPOTP(payload) {\n      return this.http.post(this.verifyFpOtpURL, payload);\n    }\n\n    checkFPLink(resetId) {\n      const headers = new HttpHeaders({\n        \"resetid\": resetId\n      });\n      return this.http.get(this.checkFpLinkURL, {\n        headers\n      });\n    }\n\n    resetPassword(payload) {\n      return this.http.post(this.resetPwdURL, payload, {\n        observe: 'response'\n      });\n    }\n\n  }\n\n  OtpVerificationService.ɵfac = function OtpVerificationService_Factory(t) {\n    return new (t || OtpVerificationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  OtpVerificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OtpVerificationService,\n    factory: OtpVerificationService.ɵfac,\n    providedIn: 'root'\n  });\n  return OtpVerificationService;\n})();","map":null,"metadata":{},"sourceType":"module"}