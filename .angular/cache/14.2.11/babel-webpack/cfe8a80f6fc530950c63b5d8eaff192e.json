{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { diag } from '@opentelemetry/api';\nimport * as otlpTypes from '../../types';\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param onSuccess\n * @param onError\n */\n\nexport function sendWithBeacon(body, url, blobPropertyBag, onSuccess, onError) {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    var error = new otlpTypes.OTLPExporterError(\"sendBeacon - cannot send \" + body);\n    onError(error);\n  }\n}\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param onSuccess\n * @param onError\n */\n\nexport function sendWithXhr(body, url, headers, onSuccess, onError) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', url);\n  var defaultHeaders = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  };\n  Object.entries(__assign(__assign({}, defaultHeaders), headers)).forEach(function (_a) {\n    var k = _a[0],\n        v = _a[1];\n    xhr.setRequestHeader(k, v);\n  });\n  xhr.send(body);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status >= 200 && xhr.status <= 299) {\n        diag.debug('xhr success', body);\n        onSuccess();\n      } else {\n        var error = new otlpTypes.OTLPExporterError(\"Failed to export with XHR (status: \" + xhr.status + \")\", xhr.status);\n        onError(error);\n      }\n    }\n  };\n} //# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module"}