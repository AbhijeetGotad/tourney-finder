{"ast":null,"code":"import { HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Config } from '../config/config';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/components/common/shared/loading-spinner/loading-spinner.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\"; // import 'rxjs/add/operator/map'\n\nexport let HrssInterceptor = /*#__PURE__*/(() => {\n  class HrssInterceptor {\n    constructor(loaderSrv, router, cookieService) {\n      this.loaderSrv = loaderSrv;\n      this.router = router;\n      this.cookieService = cookieService;\n      this.isRefreshingToken = false;\n      this.tokenSubject = new BehaviorSubject('');\n    }\n\n    intercept(req, next) {\n      let skipLoader = typeof req.params.get('skipLoader') != 'undefined' && req.params.get('skipLoader') || req.method == 'GET' || Config.isUserOnChatBot;\n      let overrideLoader = typeof req.params.get('skipLoader') != 'undefined' && req.params.get('skipLoader');\n      skipLoader = overrideLoader ? false : skipLoader; // if (Config.loggedIn && this.additionalConditions(req)) {\n      // Clone the request and set the new header in one step.\n\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer 99d4732ba8e3fc14c309d73bd19f0077624b92b9ccd667471c7d4ccf6fbe3173d0c07ae8460afe91eba5841737175b369b74d0df48b22d0ad03fb5e6a2a762d865e168a855f8da4b1467d9a9f694618327055ff367462417cb95486996c81db02b2e4755db97da4ee34c76330406f7378219f195e77e7a110a702e881ee9c5a0`\n        },\n        withCredentials: true\n      }); // } else {}\n\n      return next.handle(req).pipe(event => {\n        if (event instanceof HttpResponse && this.additionalConditions(req)) {\n          !skipLoader && this.loaderSrv.hideLoaderOnCount();\n        }\n\n        return event;\n      }).pipe(catchError(error => {\n        if (this.additionalConditions(req)) {\n          !skipLoader && this.loaderSrv.hideLoaderOnCount();\n        }\n\n        return this.handleError(req, error, next);\n      }));\n    }\n\n    handleError(_req, err, next) {\n      if (err instanceof HttpErrorResponse) {\n        if (this.additionalConditions(_req) || _req.url.includes('refreshToken')) {\n          switch (err.status) {\n            case 401:\n              this.handle401Error();\n              return throwError(err);\n\n            default:\n              return throwError(err);\n          }\n        }\n      }\n\n      return throwError(err);\n    }\n\n    handle401Error() {\n      if (Config.loggedIn) {} else {\n        this.cookieService.deleteAll();\n        this.router.navigate(['/']).then(() => {\n          window.location.reload();\n        });\n      }\n    }\n\n    additionalConditions(request) {\n      return !request.url.endsWith('environment.json');\n    }\n\n  }\n\n  HrssInterceptor.ɵfac = function HrssInterceptor_Factory(t) {\n    return new (t || HrssInterceptor)(i0.ɵɵinject(i1.LoadingSpinnerService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CookieService));\n  };\n\n  HrssInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HrssInterceptor,\n    factory: HrssInterceptor.ɵfac\n  });\n  return HrssInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}