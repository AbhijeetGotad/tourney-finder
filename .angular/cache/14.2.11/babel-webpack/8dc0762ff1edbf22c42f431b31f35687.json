{"ast":null,"code":"export function sanitizeAttributes(attributes) {\n  var out = {};\n\n  if (attributes == null || typeof attributes !== 'object') {\n    return out;\n  } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n  for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        k = _b[0],\n        v = _b[1];\n\n    if (isAttributeValue(v)) {\n      if (Array.isArray(v)) {\n        out[k] = v.slice();\n      } else {\n        out[k] = v;\n      }\n    }\n  }\n\n  return out;\n}\nexport function isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr) {\n  var type;\n\n  for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n    var element = arr_1[_i]; // null/undefined elements are allowed\n\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      } // encountered an invalid primitive\n\n\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case 'number':\n      return true;\n\n    case 'boolean':\n      return true;\n\n    case 'string':\n      return true;\n  }\n\n  return false;\n} //# sourceMappingURL=attributes.js.map","map":null,"metadata":{},"sourceType":"module"}