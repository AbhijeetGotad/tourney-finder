{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, getEnv } from '@opentelemetry/core';\nimport { prepareSend } from './platform/index';\nimport { toZipkinSpan, defaultStatusCodeTagName, defaultStatusErrorTagName } from './transform';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { prepareGetHeaders } from './utils';\n/**\n * Zipkin Exporter\n */\n\nvar ZipkinExporter =\n/** @class */\nfunction () {\n  function ZipkinExporter(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.DEFAULT_SERVICE_NAME = 'OpenTelemetry Service';\n    this._sendingPromises = [];\n    this._urlStr = config.url || getEnv().OTEL_EXPORTER_ZIPKIN_ENDPOINT;\n    this._send = prepareSend(this._urlStr, config.headers);\n    this._serviceName = config.serviceName;\n    this._statusCodeTagName = config.statusCodeTagName || defaultStatusCodeTagName;\n    this._statusDescriptionTagName = config.statusDescriptionTagName || defaultStatusErrorTagName;\n    this._isShutdown = false;\n\n    if (typeof config.getExportRequestHeaders === 'function') {\n      this._getHeaders = prepareGetHeaders(config.getExportRequestHeaders);\n    } else {\n      // noop\n      this._beforeSend = function () {};\n    }\n  }\n  /**\n   * Export spans.\n   */\n\n\n  ZipkinExporter.prototype.export = function (spans, resultCallback) {\n    var _this = this;\n\n    var serviceName = String(this._serviceName || spans[0].resource.attributes[SemanticResourceAttributes.SERVICE_NAME] || this.DEFAULT_SERVICE_NAME);\n    diag.debug('Zipkin exporter export');\n\n    if (this._isShutdown) {\n      setTimeout(function () {\n        return resultCallback({\n          code: ExportResultCode.FAILED,\n          error: new Error('Exporter has been shutdown')\n        });\n      });\n      return;\n    }\n\n    var promise = new Promise(function (resolve) {\n      _this._sendSpans(spans, serviceName, function (result) {\n        resolve();\n        resultCallback(result);\n      });\n    });\n\n    this._sendingPromises.push(promise);\n\n    var popPromise = function () {\n      var index = _this._sendingPromises.indexOf(promise);\n\n      _this._sendingPromises.splice(index, 1);\n    };\n\n    promise.then(popPromise, popPromise);\n  };\n  /**\n   * Shutdown exporter. Noop operation in this exporter.\n   */\n\n\n  ZipkinExporter.prototype.shutdown = function () {\n    diag.debug('Zipkin exporter shutdown');\n    this._isShutdown = true;\n    return this.forceFlush();\n  };\n  /**\n   * Exports any pending spans in exporter\n   */\n\n\n  ZipkinExporter.prototype.forceFlush = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      Promise.all(_this._sendingPromises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n  /**\n   * if user defines getExportRequestHeaders in config then this will be called\n   * everytime before send, otherwise it will be replaced with noop in\n   * constructor\n   * @default noop\n   */\n\n\n  ZipkinExporter.prototype._beforeSend = function () {\n    if (this._getHeaders) {\n      this._send = prepareSend(this._urlStr, this._getHeaders());\n    }\n  };\n  /**\n   * Transform spans and sends to Zipkin service.\n   */\n\n\n  ZipkinExporter.prototype._sendSpans = function (spans, serviceName, done) {\n    var _this = this;\n\n    var zipkinSpans = spans.map(function (span) {\n      return toZipkinSpan(span, String(span.attributes[SemanticResourceAttributes.SERVICE_NAME] || span.resource.attributes[SemanticResourceAttributes.SERVICE_NAME] || serviceName), _this._statusCodeTagName, _this._statusDescriptionTagName);\n    });\n\n    this._beforeSend();\n\n    return this._send(zipkinSpans, function (result) {\n      if (done) {\n        return done(result);\n      }\n    });\n  };\n\n  return ZipkinExporter;\n}();\n\nexport { ZipkinExporter }; //# sourceMappingURL=zipkin.js.map","map":null,"metadata":{},"sourceType":"module"}