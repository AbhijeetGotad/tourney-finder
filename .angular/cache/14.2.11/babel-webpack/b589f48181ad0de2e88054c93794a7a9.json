{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\n\n\nvar NoopMeter =\n/** @class */\nfunction () {\n  function NoopMeter() {}\n  /**\n   * Returns a constant noop histogram.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createHistogram = function (_name, _options) {\n    return NOOP_HISTOGRAM_METRIC;\n  };\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop observable gauge.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the observable gauge callback\n   */\n\n\n  NoopMeter.prototype.createObservableGauge = function (_name, _options, _callback) {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  };\n  /**\n   * Returns a constant noop observable counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the observable counter callback\n   */\n\n\n  NoopMeter.prototype.createObservableCounter = function (_name, _options, _callback) {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop up down observable counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the up down observable counter callback\n   */\n\n\n  NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options, _callback) {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  };\n\n  return NoopMeter;\n}();\n\nexport { NoopMeter };\n\nvar NoopMetric =\n/** @class */\nfunction () {\n  function NoopMetric() {}\n\n  return NoopMetric;\n}();\n\nexport { NoopMetric };\n\nvar NoopCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopCounterMetric, _super);\n\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopCounterMetric.prototype.add = function (_value, _attributes) {};\n\n  return NoopCounterMetric;\n}(NoopMetric);\n\nexport { NoopCounterMetric };\n\nvar NoopUpDownCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopUpDownCounterMetric, _super);\n\n  function NoopUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) {};\n\n  return NoopUpDownCounterMetric;\n}(NoopMetric);\n\nexport { NoopUpDownCounterMetric };\n\nvar NoopHistogramMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopHistogramMetric, _super);\n\n  function NoopHistogramMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopHistogramMetric.prototype.record = function (_value, _attributes) {};\n\n  return NoopHistogramMetric;\n}(NoopMetric);\n\nexport { NoopHistogramMetric };\n\nvar NoopObservableBaseMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopObservableBaseMetric, _super);\n\n  function NoopObservableBaseMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopObservableBaseMetric.prototype.observation = function () {\n    return {\n      observable: this,\n      value: 0\n    };\n  };\n\n  return NoopObservableBaseMetric;\n}(NoopMetric);\n\nexport { NoopObservableBaseMetric };\nexport var NOOP_METER = new NoopMeter(); // Synchronous instruments\n\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric(); // Asynchronous instruments\n\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableBaseMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableBaseMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableBaseMetric(); //# sourceMappingURL=NoopMeter.js.map","map":null,"metadata":{},"sourceType":"module"}