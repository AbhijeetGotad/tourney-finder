{"ast":null,"code":"import { Injectable, NgZone, Optional, Inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/dialog';\nconst diractionMap = {\n  left: 'left',\n  right: 'left',\n  top: 'top',\n  bottom: 'top'\n};\n/** @type {?} */\n\nconst multyMap = {\n  left: 1,\n  right: -1,\n  top: 1,\n  bottom: -1\n};\n/**\n * @record\n */\n\nfunction AnimationOption() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  AnimationOption.prototype.keyframes;\n  /** @type {?} */\n\n  AnimationOption.prototype.keyframeAnimationOptions;\n}\n/**\n * @record\n */\n\n\nfunction MatDialogConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  MatDialogConfig.prototype.title;\n  /** @type {?|undefined} */\n\n  MatDialogConfig.prototype.animation;\n  /** @type {?|undefined} */\n\n  MatDialogConfig.prototype.position;\n}\n\nlet NgDialogAnimationService = /*#__PURE__*/(() => {\n  class NgDialogAnimationService {\n    /**\n     * @param {?} dialog\n     * @param {?} ngZone\n     * @param {?=} incomingOptions\n     * @param {?=} outgoingOptions\n     */\n    constructor(dialog, ngZone, incomingOptions, outgoingOptions) {\n      this.dialog = dialog;\n      this.ngZone = ngZone;\n      this.incomingOptions = incomingOptions;\n      this.outgoingOptions = outgoingOptions;\n    }\n    /**\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    open(componentOrTemplateRef, config) {\n      /** @type {?} */\n      const dir = config.direction || (document.querySelectorAll('[dir=\"rtl\"]').length ? 'rtl' : 'ltr');\n      config.direction = config.direction || dir;\n\n      if (config.animation) {\n        if (config.animation.to === 'aside') {\n          config.animation.to = dir === 'rtl' ? 'left' : 'right';\n        }\n      }\n\n      if (config.position && config.position.rowEnd) {\n        if (dir === 'rtl') {\n          config.position.right = config.position.rowEnd;\n        } else {\n          config.position.left = config.position.rowEnd;\n        }\n      }\n\n      if (config.position && config.position.rowStart) {\n        if (dir === 'rtl') {\n          config.position.left = config.position.rowStart;\n        } else {\n          config.position.right = config.position.rowStart;\n        }\n      }\n      /** @type {?} */\n\n\n      const ref = this.dialog.open(componentOrTemplateRef, config);\n      /** @type {?} */\n\n      const container =\n      /** @type {?} */\n      document.getElementsByTagName('mat-dialog-container')[0];\n\n      if (config.title) {\n        /** @type {?} */\n        const el = document.createElement('span');\n        el.textContent = config.title;\n        el.className = 'dialogTitle';\n        /** @type {?} */\n\n        const elClose = document.createElement('span');\n        elClose.textContent = 'X';\n        elClose.className = 'dialogClose';\n        elClose.addEventListener('click',\n        /**\n        * @return {?}\n        */\n        () => {\n          ref.close();\n        });\n        /** @type {?} */\n\n        const titleContainer = document.createElement('div');\n        titleContainer.className = 'titleContainer';\n        titleContainer.append(el);\n        titleContainer.append(elClose);\n        container.prepend(titleContainer);\n      }\n\n      if (config.animation) {\n        /** @type {?} */\n        const incomingOptions = config.animation.incomingOptions || this.incomingOptions || {\n          keyframeAnimationOptions: {\n            duration: 600,\n            easing: 'ease-in'\n          }\n        };\n        /** @type {?} */\n\n        const outgoingOptions = config.animation.outgoingOptions || this.outgoingOptions || {\n          keyframeAnimationOptions: {\n            duration: 600,\n            easing: 'ease-out'\n          }\n        };\n        /** @type {?} */\n\n        const wrapper = document.getElementsByClassName('cdk-global-overlay-wrapper')[0];\n        /** @type {?} */\n\n        const animate =\n        /**\n        * @param {?} keyframes\n        * @param {?} options\n        * @return {?}\n        */\n        (keyframes, options) => {\n          return wrapper.animate(keyframes, options);\n        };\n        /** @type {?} */\n\n\n        const _afterClosed = new Subject();\n\n        ref.afterClosed =\n        /**\n        * @return {?}\n        */\n        () => {\n          return _afterClosed.asObservable();\n        };\n        /** @type {?} */\n\n\n        const closeFunction = ref.close;\n        /** @type {?} */\n\n        let incomeKeyFrames = incomingOptions.keyframes;\n        /** @type {?} */\n\n        let outgoingKeyFrames = outgoingOptions.keyframes;\n\n        if (config.animation.to) {\n          /** @type {?} */\n          const to = diractionMap[config.animation.to];\n          /** @type {?} */\n\n          const keyFrame100 = {};\n          /** @type {?} */\n\n          const keyFrame0 = {};\n          keyFrame0[to] = 0;\n          keyFrame100[to] = to === 'top' || to === 'bottom' ? container.clientHeight * multyMap[config.animation.to] + 'px' : container.clientWidth * multyMap[config.animation.to] + 'px';\n          incomeKeyFrames = incomeKeyFrames || [keyFrame100, keyFrame0];\n          outgoingKeyFrames = outgoingKeyFrames || [keyFrame0, keyFrame100];\n        }\n\n        animate(incomeKeyFrames, incomingOptions.keyframeAnimationOptions);\n        /** @type {?} */\n\n        const closeHandler =\n        /**\n        * @param {?=} dialogResult\n        * @return {?}\n        */\n        dialogResult => {\n          _afterClosed.next(dialogResult);\n          /** @type {?} */\n\n\n          const animation = animate(outgoingKeyFrames, outgoingOptions.keyframeAnimationOptions);\n\n          animation.onfinish =\n          /**\n          * @return {?}\n          */\n          () => {\n            /** @type {?} */\n            wrapper.style.display = 'none';\n            this.ngZone.run(\n            /**\n            * @return {?}\n            */\n            () => ref.close(dialogResult));\n          };\n\n          ref.close = closeFunction;\n        };\n\n        ref.close =\n        /**\n        * @param {?=} dialogResult\n        * @return {?}\n        */\n        dialogResult => closeHandler(dialogResult);\n      }\n\n      return ref;\n    }\n\n  }\n\n  NgDialogAnimationService.ɵfac = function NgDialogAnimationService_Factory(t) {\n    return new (t || NgDialogAnimationService)(ɵngcc0.ɵɵinject(ɵngcc1.MatDialog), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject('INCOMING_OPTION', 8), ɵngcc0.ɵɵinject('OUTGOING_OPTION', 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  NgDialogAnimationService.ɵprov = ɵɵdefineInjectable({\n    factory: function NgDialogAnimationService_Factory() {\n      return new NgDialogAnimationService(ɵɵinject(MatDialog), ɵɵinject(NgZone), ɵɵinject(\"INCOMING_OPTION\", 8), ɵɵinject(\"OUTGOING_OPTION\", 8));\n    },\n    token: NgDialogAnimationService,\n    providedIn: \"root\"\n  });\n  return NgDialogAnimationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NgDialogAnimationService.prototype.dialog;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgDialogAnimationService.prototype.ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgDialogAnimationService.prototype.incomingOptions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgDialogAnimationService.prototype.outgoingOptions;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgDialogAnimationService }; //# sourceMappingURL=ng-dialog-animation.js.map","map":null,"metadata":{},"sourceType":"module"}