{"ast":null,"code":"import { HttpEvent, HttpRequest, HttpHandler } from '@angular/common/http';\nimport api from \"@opentelemetry/api\";\nimport openTelmetry from '@opentelemetry/api';\nimport { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport * as i0 from \"@angular/core\";\nexport let TelemetryWrapperService = /*#__PURE__*/(() => {\n  class TelemetryWrapperService {\n    constructor() {\n      this.userId = '';\n      this.exporterSet = false;\n      this.sessionID = '';\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    setUserId(userId) {\n      this.userId = userId;\n    }\n\n    getSessionID() {\n      return this.sessionID;\n    }\n\n    setSessionID(sessionID) {\n      this.sessionID = sessionID;\n    }\n\n    sendCustomSpan(spanName, attrArr) {\n      if (!this.exporterSet) {\n        this.setupExporter();\n        this.exporterSet = true;\n      }\n\n      const span = this.tracer.startSpan(spanName);\n\n      for (let i = 0; i < attrArr.length; i++) {\n        span.setAttribute(attrArr[i].key, attrArr[i].val);\n      } // span.setAttribute('lastname', 'chandran');\n\n\n      setTimeout(() => {\n        span.end();\n      }, 2000);\n    }\n\n    setupExporter() {\n      const provider = new BasicTracerProvider();\n      provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n      provider.register();\n      this.tracer = openTelmetry.trace.getTracer('tracer-node');\n    }\n\n  }\n\n  TelemetryWrapperService.ɵfac = function TelemetryWrapperService_Factory(t) {\n    return new (t || TelemetryWrapperService)();\n  };\n\n  TelemetryWrapperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TelemetryWrapperService,\n    factory: TelemetryWrapperService.ɵfac,\n    providedIn: 'root'\n  });\n  return TelemetryWrapperService;\n})();\nexport let TelemetryWrapper = /*#__PURE__*/(() => {\n  class TelemetryWrapper {\n    constructor(telemetryWrapperService) {\n      this.telemetryWrapperService = telemetryWrapperService; // this.telemetryWrapperService.setupExporter();\n    }\n\n    intercept(httpRequest, next) {\n      this.telemetryWrapperService.setUserId('');\n      this.telemetryWrapperService.setSessionID('');\n      this.addAttribute('userId', this.telemetryWrapperService.getUserId());\n      this.addAttribute('sessionId', this.telemetryWrapperService.getSessionID());\n      return next.handle(httpRequest);\n    }\n\n    addAttribute(attrName, attrValue) {\n      let activeSpan = api.trace.getSpan(api.context.active());\n      activeSpan === null || activeSpan === void 0 ? void 0 : activeSpan.setAttribute(attrName, attrValue);\n    }\n\n  }\n\n  TelemetryWrapper.ɵfac = function TelemetryWrapper_Factory(t) {\n    return new (t || TelemetryWrapper)(i0.ɵɵinject(TelemetryWrapperService));\n  };\n\n  TelemetryWrapper.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TelemetryWrapper,\n    factory: TelemetryWrapper.ɵfac\n  });\n  return TelemetryWrapper;\n})();","map":null,"metadata":{},"sourceType":"module"}